import React, { useState, useEffect } from 'react';
import { useDemoContext } from '../context/DemoContext';
import { generateDeploymentOptions } from '../utils/mockDataGenerator';

const DeploymentOptions = () => {
  const { state, dispatch, ACTION_TYPES } = useDemoContext();
  const [deploymentOptions, setDeploymentOptions] = useState([]);
  const [selectedOption, setSelectedOption] = useState(null);
  const [configOptions, setConfigOptions] = useState({});
  const [isDeploying, setIsDeploying] = useState(false);
  const [isDeployed, setIsDeployed] = useState(false);
  const [deploymentDetails, setDeploymentDetails] = useState(null);
  
  // Load deployment options based on user type
  useEffect(() => {
    const options = generateDeploymentOptions(state.userType);
    setDeploymentOptions(options);
    
    // Set default selected option
    if (options.length > 0 && !selectedOption) {
      setSelectedOption(options[0].id);
    }
  }, [state.userType]);
  
  // Handle option selection
  const handleOptionSelect = (optionId) => {
    setSelectedOption(optionId);
    
    // Reset configuration options
    setConfigOptions({});
  };
  
  // Handle configuration change
  const handleConfigChange = (key, value) => {
    setConfigOptions({
      ...configOptions,
      [key]: value,
    });
  };
  
  // Handle deployment
  const handleDeploy = () => {
    setIsDeploying(true);
    
    // Simulate deployment process
    setTimeout(() => {
      setIsDeploying(false);
      setIsDeployed(true);
      
      // Generate deployment details
      const option = deploymentOptions.find(opt => opt.id === selectedOption);
      setDeploymentDetails({
        name: `Knowledge Base ${state.selectedScenario ? state.selectedScenario.charAt(0).toUpperCase() + state.selectedScenario.slice(1) : ''} Assistant`,
        deploymentType: option.title,
        deploymentDate: new Date().toLocaleDateString(),
        deploymentTime: new Date().toLocaleTimeString(),
        status: 'Active',
        accessUrl: option.id === 'website' 
          ? 'https://yourdomain.com/assistant'
          : option.id === 'email'
            ? 'assistant@yourdomain.com'
            : option.id === 'api' 
              ? 'https://api.yourdomain.com/kb-assistant'
              : option.id === 'crm'
                ? 'Integrated with CRM'
                : option.id === 'slack'
                  ? '@assistant in Slack'
                  : 'Custom Integration URL',
        accessCode: `KB-${Math.random().toString(36).substr(2, 9).toUpperCase()}`,
      });
    }, 3000);
  };
  
  // Determine which configuration options to show based on selected option
  const getConfigurationFields = () => {
    const option = deploymentOptions.find(opt => opt.id === selectedOption);
    if (!option) return [];
    
    switch (option.id) {
      case 'website':
        return [
          { id: 'position', label: 'Widget Position', type: 'select', options: ['Bottom Right', 'Bottom Left', 'Top Right', 'Top Left'] },
          { id: 'chatTitle', label: 'Chat Title', type: 'text', placeholder: 'How can I help you today?' },
          { id: 'theme', label: 'Theme Color', type: 'select', options: ['Blue', 'Green', 'Purple', 'Gray', 'Custom'] },
          { id: 'autoOpen', label: 'Auto Open After Delay', type: 'checkbox' },
        ];
      case 'email':
        return [
          { id: 'emailAddress', label: 'Assistant Email Address', type: 'text', placeholder: 'assistant@yourdomain.com' },
          { id: 'responseTime', label: 'Response Time', type: 'select', options: ['Immediate', '< 5 minutes', '< 15 minutes', 'Custom'] },
          { id: 'signature', label: 'Email Signature', type: 'textarea', placeholder: 'Your AI Assistant' },
          { id: 'ccTeam', label: 'CC Team Members', type: 'checkbox' },
        ];
      case 'voice':
        return [
          { id: 'voiceType', label: 'Voice Type', type: 'select', options: ['Female', 'Male', 'Neutral'] },
          { id: 'voiceStyle', label: 'Voice Style', type: 'select', options: ['Professional', 'Friendly', 'Concise'] },
          { id: 'wakeWord', label: 'Wake Word', type: 'text', placeholder: 'Hey Assistant' },
          { id: 'confirmResponses', label: 'Confirm Actions Verbally', type: 'checkbox' },
        ];
      case 'team':
        return [
          { id: 'teamMembers', label: 'Team Members', type: 'textarea', placeholder: 'Enter email addresses, one per line' },
          { id: 'accessLevel', label: 'Access Level', type: 'select', options: ['Full Access', 'Read Only', 'Custom'] },
          { id: 'notifications', label: 'Usage Notifications', type: 'checkbox' },
        ];
      case 'api':
        return [
          { id: 'authType', label: 'Authentication Type', type: 'select', options: ['API Key', 'OAuth 2.0', 'JWT'] },
          { id: 'rateLimit', label: 'Rate Limit', type: 'select', options: ['100 req/min', '1000 req/min', '10,000 req/min', 'Custom'] },
          { id: 'returnFormat', label: 'Return Format', type: 'select', options: ['JSON', 'XML', 'Both'] },
          { id: 'logRequests', label: 'Log API Requests', type: 'checkbox' },
        ];
      case 'crm':
        return [
          { id: 'crmSystem', label: 'CRM System', type: 'select', options: ['Salesforce', 'HubSpot', 'Microsoft Dynamics', 'Zoho', 'Custom'] },
          { id: 'syncDirection', label: 'Sync Direction', type: 'select', options: ['One-way (CRM to KB)', 'One-way (KB to CRM)', 'Two-way'] },
          { id: 'syncFrequency', label: 'Sync Frequency', type: 'select', options: ['Real-time', 'Hourly', 'Daily', 'Custom'] },
          { id: 'logActivities', label: 'Log Activities in CRM', type: 'checkbox' },
        ];
      case 'slack':
        return [
          { id: 'channels', label: 'Available in Channels', type: 'textarea', placeholder: 'Enter channel names, one per line' },
          { id: 'commandPrefix', label: 'Command Prefix', type: 'text', placeholder: '/assistant' },
          { id: 'responseVisibility', label: 'Response Visibility', type: 'select', options: ['Public (in channel)', 'Private (only to user)', 'Both (user choice)'] },
          { id: 'activeHours', label: 'Active Hours', type: 'select', options: ['Business Hours', '24/7', 'Custom'] },
        ];
      default:
        return [
          { id: 'name', label: 'Deployment Name', type: 'text', placeholder: 'My Knowledge Base Assistant' },
          { id: 'description', label: 'Description', type: 'textarea', placeholder: 'Describe your deployment' },
          { id: 'accessLevel', label: 'Access Level', type: 'select', options: ['Public', 'Private', 'Restricted'] },
        ];
    }
  };
  
  // Get icon for deployment option
  const getOptionIcon = (iconName) => {
    switch (iconName) {
      case 'globe':
        return (
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"></path>
          </svg>
        );
      case 'mail':
        return (
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
          </svg>
        );
      case 'microphone':
        return (
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"></path>
          </svg>
        );
      case 'users':
        return (
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"></path>
          </svg>
        );
      case 'code':
        return (
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"></path>
          </svg>
        );
      case 'shopping-bag':
        return (
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path>
          </svg>
        );
      case 'layout':
        return (
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM4 13a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H5a1 1 0 01-1-1v-6zM16 13a1 1 0 011-1h2a1 1 0 011 1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-6z"></path>
          </svg>
        );
      case 'database':
        return (
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4m0 5c0 2.21-3.582 4-8 4s-8-1.79-8-4"></path>
          </svg>
        );
      case 'help-circle':
        return (
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        );
      case 'message-square':
        return (
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
          </svg>
        );
      default:
        return (
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2m-2-4h.01M17 16h.01"></path>
          </svg>
        );
    }
  };
  
  // Render configuration field based on type
  const renderConfigField = (field) => {
    switch (field.type) {
      case 'text':
        return (
          <input
            type="text"
            id={field.id}
            className="mt-1 focus:ring-blue-500 focus:border-blue-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"
            placeholder={field.placeholder || ''}
            value={configOptions[field.id] || ''}
            onChange={(e) => handleConfigChange(field.id, e.target.value)}
          />
        );
      case 'textarea':
        return (
          <textarea
            id={field.id}
            rows="3"
            className="shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border-gray-300 rounded-md"
            placeholder={field.placeholder || ''}
            value={configOptions[field.id] || ''}
            onChange={(e) => handleConfigChange(field.id, e.target.value)}
          ></textarea>
        );
      case 'select':
        return (
          <select
            id={field.id}
            className="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            value={configOptions[field.id] || ''}
            onChange={(e) => handleConfigChange(field.id, e.target.value)}
          >
            <option value="">Select an option</option>
            {field.options.map((option) => (
              <option key={option} value={option}>{option}</option>
            ))}
          </select>
        );
      case 'checkbox':
        return (
          <div className="flex items-center h-5">
            <input
              id={field.id}
              type="checkbox"
              className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
              checked={configOptions[field.id] || false}
              onChange={(e) => handleConfigChange(field.id, e.target.checked)}
            />
          </div>
        );
      default:
        return null;
    }
  };
  
  return (
    <div className="w-full max-w-7xl mx-auto p-6">
      <h2 className="text-2xl font-bold mb-4">Deployment Options</h2>
      <p className="text-gray-600 mb-8">
        Configure how you want to deploy your knowledge base to make it accessible to your users.
      </p>
      
      {isDeployed ? (
        <div className="bg-green-50 border border-green-200 rounded-lg p-6 mb-8">
          <div className="flex items-start">
            <div className="flex-shrink-0">
              <svg className="h-6 w-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <div className="ml-3">
              <h3 className="text-lg font-medium text-green-800">Deployment Successful!</h3>
              <div className="mt-4 text-sm text-green-700">
                <p className="font-medium mb-2">Your knowledge base has been successfully deployed.</p>
                
                <div className="bg-white rounded-md p-4 border border-green-200 mt-4">
                  <h4 className="font-medium text-gray-900 mb-2">Deployment Details</h4>
                  <dl className="grid grid-cols-1 gap-x-4 gap-y-2 sm:grid-cols-2">
                    <div className="sm:col-span-1">
                      <dt className="text-sm font-medium text-gray-500">Name</dt>
                      <dd className="mt-1 text-sm text-gray-900">{deploymentDetails.name}</dd>
                    </div>
                    <div className="sm:col-span-1">
                      <dt className="text-sm font-medium text-gray-500">Type</dt>
                      <dd className="mt-1 text-sm text-gray-900">{deploymentDetails.deploymentType}</dd>
                    </div>
                    <div className="sm:col-span-1">
                      <dt className="text-sm font-medium text-gray-500">Deployment Date</dt>
                      <dd className="mt-1 text-sm text-gray-900">{deploymentDetails.deploymentDate}</dd>
                    </div>
                    <div className="sm:col-span-1">
                      <dt className="text-sm font-medium text-gray-500">Status</dt>
                      <dd className="mt-1 text-sm text-gray-900">
                        <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                          {deploymentDetails.status}
                        </span>
                      </dd>
                    </div>
                    <div className="sm:col-span-2">
                      <dt className="text-sm font-medium text-gray-500">Access URL</dt>
                      <dd className="mt-1 text-sm text-gray-900">{deploymentDetails.accessUrl}</dd>
                    </div>
                    <div className="sm:col-span-2">
                      <dt className="text-sm font-medium text-gray-500">Access Code</dt>
                      <dd className="mt-1 text-sm text-gray-900 font-mono bg-gray-100 p-1 rounded">{deploymentDetails.accessCode}</dd>
                    </div>
                  </dl>
                </div>
                
                <div className="mt-6">
                  <button 
                    className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    onClick={() => {
                      setIsDeployed(false);
                      setSelectedOption(null);
                      setConfigOptions({});
                    }}
                  >
                    Configure Another Deployment
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      ) : (
        <>
          {/* Deployment options grid */}
          <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 mb-8">
            {deploymentOptions.map((option) => (
              <div 
                key={option.id} 
                className={`border rounded-lg p-6 cursor-pointer transition-all ${
                  selectedOption === option.id
                    ? 'border-blue-500 bg-blue-50 shadow-md'
                    : 'border-gray-200 hover:border-blue-300 hover:bg-blue-50'
                }`}
                onClick={() => handleOptionSelect(option.id)}
              >
                <div className="flex items-start">
                  <div className={`flex-shrink-0 h-10 w-10 rounded-md flex items-center justify-center ${
                    selectedOption === option.id ? 'bg-blue-500 text-white' : 'bg-gray-100 text-gray-500'
                  }`}>
                    {getOptionIcon(option.icon)}
                  </div>
                  <div className="ml-4">
                    <h3 className="text-lg font-medium text-gray-900">{option.title}</h3>
                    <p className="mt-1 text-sm text-gray-500">{option.description}</p>
                    <div className="mt-2 flex items-center text-sm text-gray-500">
                      <span className="mr-2">Setup time: {option.setupTime}</span>
                      <span>Complexity: {option.complexity}</span>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
          
          {/* Configuration form */}
          {selectedOption && (
            <div className="bg-white rounded-lg shadow-md p-6 mb-8">
              <h3 className="text-lg font-medium text-gray-900 mb-4">
                Configuration Options
              </h3>
              
              <div className="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-2">
                {getConfigurationFields().map((field) => (
                  <div key={field.id} className={field.type === 'textarea' ? 'sm:col-span-2' : ''}>
                    <label htmlFor={field.id} className="block text-sm font-medium text-gray-700">
                      {field.label}
                    </label>
                    {renderConfigField(field)}
                  </div>
                ))}
              </div>
              
              <div className="mt-6 flex justify-end">
                <button
                  type="button"
                  className={`px-4 py-2 rounded-md text-white ${
                    isDeploying
                      ? 'bg-gray-400 cursor-not-allowed'
                      : 'bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'
                  }`}
                  onClick={handleDeploy}
                  disabled={isDeploying}
                >
                  {isDeploying ? (
                    <span className="flex items-center">
                      <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Deploying...
                    </span>
                  ) : (
                    'Deploy'
                  )}
                </button>
              </div>
            </div>
          )}
        </>
      )}
      
      {/* Next steps */}
      <div className="bg-gray-50 rounded-lg p-6 border border-gray-200">
        <h3 className="text-lg font-medium text-gray-900 mb-2">What's Next</h3>
        <p className="text-gray-600 mb-4">
          After deploying your knowledge base, here are some recommended next steps:
        </p>
        <ul className="space-y-2 text-sm text-gray-600">
          <li className="flex items-start">
            <svg className="h-5 w-5 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span>Test your knowledge base with real-world queries</span>
          </li>
          <li className="flex items-start">
            <svg className="h-5 w-5 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span>Gather user feedback and identify areas for improvement</span>
          </li>
          <li className="flex items-start">
            <svg className="h-5 w-5 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span>Regularly update your knowledge base with new information</span>
          </li>
          <li className="flex items-start">
            <svg className="h-5 w-5 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span>Monitor usage metrics to understand how your knowledge base is being used</span>
          </li>
        </ul>
      </div>
      
      {/* Action buttons */}
      <div className="mt-8 flex justify-between">
        <button 
          className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          onClick={() => dispatch({ type: ACTION_TYPES.PREVIOUS_STEP })}
        >
          Back
        </button>
        
        <button 
          className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          onClick={() => dispatch({ type: ACTION_TYPES.RESET_DEMO })}
        >
          Finish Demo
        </button>
      </div>
    </div>
  );
};

export default DeploymentOptions;
