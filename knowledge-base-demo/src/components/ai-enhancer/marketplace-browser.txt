import React, { useState, useEffect } from 'react';
import { useDemoContext } from '../context/DemoContext';

// Mock data generator for marketplace knowledge bases
const generateMockKnowledgeBases = (scenario) => {
  // Base knowledge bases available in all scenarios
  const baseKnowledgeBases = [
    {
      id: 'general-business',
      title: 'General Business Operations',
      publisher: 'Business Experts Inc.',
      rating: 4.2,
      reviews: 156,
      price: {
        monthly: 199,
        annual: 1990,
        oneTime: 4990
      },
      coverage: 85,
      lastUpdated: '2 weeks ago',
      category: 'Business',
      description: 'Comprehensive knowledge base covering general business operations, HR policies, and standard operating procedures.',
      featured: false,
    },
    {
      id: 'customer-service',
      title: 'Customer Service Excellence',
      publisher: 'Service First Academy',
      rating: 4.8,
      reviews: 423,
      price: {
        monthly: 149,
        annual: 1490,
        oneTime: 3990
      },
      coverage: 92,
      lastUpdated: '3 days ago',
      category: 'Customer Service',
      description: 'Complete customer service knowledge with scripts, troubleshooting guides, and satisfaction strategies.',
      featured: true,
    }
  ];
  
  // Scenario-specific knowledge bases
  let specificKnowledgeBases = [];
  
  if (scenario === 'medical') {
    specificKnowledgeBases = [
      {
        id: 'healthcare-admin',
        title: 'Healthcare Administration',
        publisher: 'MedAdmin Solutions',
        rating: 4.7,
        reviews: 289,
        price: {
          monthly: 299,
          annual: 2990,
          oneTime: 7990
        },
        coverage: 94,
        lastUpdated: '1 week ago',
        category: 'Healthcare',
        description: 'Comprehensive knowledge base for healthcare administration, including billing, coding, and compliance.',
        featured: true,
      },
      {
        id: 'patient-education',
        title: 'Patient Education Library',
        publisher: 'Health Literacy Partners',
        rating: 4.5,
        reviews: 178,
        price: {
          monthly: 249,
          annual: 2490,
          oneTime: 5990
        },
        coverage: 90,
        lastUpdated: '2 weeks ago',
        category: 'Healthcare',
        description: 'Extensive patient education materials covering common conditions, treatments, and preventive care.',
        featured: false,
      },
      {
        id: 'medical-protocols',
        title: 'Clinical Protocols & Guidelines',
        publisher: 'Evidence Medical Group',
        rating: 4.9,
        reviews: 342,
        price: {
          monthly: 349,
          annual: 3490,
          oneTime: 8990
        },
        coverage: 95,
        lastUpdated: '3 days ago',
        category: 'Healthcare',
        description: 'Up-to-date clinical protocols and guidelines based on the latest evidence and best practices.',
        featured: false,
      },
    ];
  } else if (scenario === 'legal') {
    specificKnowledgeBases = [
      {
        id: 'contract-law',
        title: 'Contract Law Essentials',
        publisher: 'LegalPro Publishers',
        rating: 4.6,
        reviews: 215,
        price: {
          monthly: 329,
          annual: 3290,
          oneTime: 7990
        },
        coverage: 92,
        lastUpdated: '5 days ago',
        category: 'Legal',
        description: 'Comprehensive contract law knowledge base including templates, clauses, and negotiation strategies.',
        featured: true,
      },
      {
        id: 'compliance-framework',
        title: 'Regulatory Compliance Framework',
        publisher: 'Compliance Standards Group',
        rating: 4.8,
        reviews: 198,
        price: {
          monthly: 279,
          annual: 2790,
          oneTime: 6990
        },
        coverage: 96,
        lastUpdated: '1 week ago',
        category: 'Legal',
        description: 'Complete regulatory compliance knowledge covering multiple industries and jurisdictions.',
        featured: false,
      },
      {
        id: 'litigation-support',
        title: 'Litigation Support System',
        publisher: 'Trial Technologies',
        rating: 4.4,
        reviews: 167,
        price: {
          monthly: 399,
          annual: 3990,
          oneTime: 9990
        },
        coverage: 88,
        lastUpdated: '2 weeks ago',
        category: 'Legal',
        description: 'Litigation knowledge base with case preparation strategies, document management, and court procedures.',
        featured: false,
      },
    ];
  } else if (scenario === 'financial') {
    specificKnowledgeBases = [
      {
        id: 'investment-advisory',
        title: 'Investment Advisory Framework',
        publisher: 'Wealth Strategy Partners',
        rating: 4.7,
        reviews: 231,
        price: {
          monthly: 349,
          annual: 3490,
          oneTime: 8490
        },
        coverage: 93,
        lastUpdated: '4 days ago',
        category: 'Finance',
        description: 'Comprehensive investment knowledge covering asset allocation, portfolio strategies, and market analysis.',
        featured: true,
      },
      {
        id: 'tax-planning',
        title: 'Tax Planning Strategies',
        publisher: 'Tax Intelligence Group',
        rating: 4.9,
        reviews: 276,
        price: {
          monthly: 299,
          annual: 2990,
          oneTime: 7490
        },
        coverage: 94,
        lastUpdated: '1 week ago',
        category: 'Finance',
        description: 'Extensive tax planning knowledge base with strategies, deductions, and compliance guidelines.',
        featured: false,
      },
      {
        id: 'retirement-planning',
        title: 'Retirement Planning System',
        publisher: 'Future Financial Solutions',
        rating: 4.6,
        reviews: 189,
        price: {
          monthly: 249,
          annual: 2490,
          oneTime: 5990
        },
        coverage: 91,
        lastUpdated: '10 days ago',
        category: 'Finance',
        description: 'Complete retirement planning knowledge with income strategies, estate planning, and long-term care considerations.',
        featured: false,
      },
    ];
  } else {
    // Default knowledge bases if no specific scenario
    specificKnowledgeBases = [
      {
        id: 'industry-kb-1',
        title: 'Industry Knowledge Base 1',
        publisher: 'Expert Publishers',
        rating: 4.5,
        reviews: 200,
        price: {
          monthly: 299,
          annual: 2990,
          oneTime: 6990
        },
        coverage: 90,
        lastUpdated: '1 week ago',
        category: 'Industry',
        description: 'Comprehensive industry knowledge covering key processes and best practices.',
        featured: true,
      },
      {
        id: 'industry-kb-2',
        title: 'Industry Knowledge Base 2',
        publisher: 'Specialist Group',
        rating: 4.3,
        reviews: 175,
        price: {
          monthly: 249,
          annual: 2490,
          oneTime: 5990
        },
        coverage: 85,
        lastUpdated: '2 weeks ago',
        category: 'Industry',
        description: 'Specialized knowledge for industry-specific applications and scenarios.',
        featured: false,
      },
    ];
  }
  
  return [...baseKnowledgeBases, ...specificKnowledgeBases];
};

const MarketplaceBrowser = () => {
  const { state, dispatch, ACTION_TYPES } = useDemoContext();
  const [knowledgeBases, setKnowledgeBases] = useState([]);
  const [filteredKnowledgeBases, setFilteredKnowledgeBases] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [filters, setFilters] = useState({
    category: '',
    minRating: 0,
    priceRange: '',
    featured: false,
  });
  const [comparisonItems, setComparisonItems] = useState([]);
  
  // Load mock data based on scenario
  useEffect(() => {
    const mockData = generateMockKnowledgeBases(state.selectedScenario || 'default');
    setKnowledgeBases(mockData);
    setFilteredKnowledgeBases(mockData);
  }, [state.selectedScenario]);
  
  // Apply filters and search
  useEffect(() => {
    let filtered = [...knowledgeBases];
    
    // Apply search term
    if (searchTerm) {
      filtered = filtered.filter(kb => 
        kb.title.toLowerCase().includes(searchTerm.toLowerCase()) || 
        kb.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
        kb.publisher.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    // Apply category filter
    if (filters.category) {
      filtered = filtered.filter(kb => kb.category === filters.category);
    }
    
    // Apply rating filter
    if (filters.minRating > 0) {
      filtered = filtered.filter(kb => kb.rating >= filters.minRating);
    }
    
    // Apply price range filter
    if (filters.priceRange) {
      const [min, max] = filters.priceRange.split('-').map(Number);
      filtered = filtered.filter(kb => {
        const monthlyPrice = kb.price.monthly;
        return monthlyPrice >= min && (max ? monthlyPrice <= max : true);
      });
    }
    
    // Apply featured filter
    if (filters.featured) {
      filtered = filtered.filter(kb => kb.featured);
    }
    
    setFilteredKnowledgeBases(filtered);
  }, [searchTerm, filters, knowledgeBases]);
  
  // Handle filter changes
  const handleFilterChange = (name, value) => {
    setFilters({
      ...filters,
      [name]: value,
    });
  };
  
  // Handle adding/removing items from comparison
  const toggleComparison = (knowledgeBase) => {
    if (comparisonItems.some(item => item.id === knowledgeBase.id)) {
      setComparisonItems(comparisonItems.filter(item => item.id !== knowledgeBase.id));
    } else {
      if (comparisonItems.length < 3) {
        setComparisonItems([...comparisonItems, knowledgeBase]);
      }
    }
  };
  
  // Handle selection of a knowledge base
  const selectKnowledgeBase = (knowledgeBase) => {
    dispatch({
      type: ACTION_TYPES.SELECT_KNOWLEDGE_BASE,
      payload: knowledgeBase,
    });
    
    dispatch({ type: ACTION_TYPES.NEXT_STEP });
  };
  
  // Get available categories from knowledge bases
  const categories = [...new Set(knowledgeBases.map(kb => kb.category))];
  
  return (
    <div className="w-full max-w-7xl mx-auto p-6">
      <h2 className="text-2xl font-bold mb-4">Marketplace Browser</h2>
      <p className="text-gray-600 mb-8">
        Browse available knowledge bases for your industry and select the one that best fits your needs.
      </p>
      
      {/* Search and filters */}
      <div className="bg-white rounded-lg shadow-md p-6 mb-8">
        <div className="grid grid-cols-1 gap-6 md:grid-cols-4">
          {/* Search */}
          <div className="md:col-span-4">
            <label htmlFor="search" className="block text-sm font-medium text-gray-700 mb-1">
              Search Knowledge Bases
            </label>
            <div className="relative rounded-md shadow-sm">
              <input
                type="text"
                id="search"
                className="focus:ring-blue-500 focus:border-blue-500 block w-full pr-10 sm:text-sm border-gray-300 rounded-md"
                placeholder="Search by title, description, or publisher..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
              <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                <svg className="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
              </div>
            </div>
          </div>
          
          {/* Category filter */}
          <div>
            <label htmlFor="category" className="block text-sm font-medium text-gray-700 mb-1">
              Category
            </label>
            <select
              id="category"
              className="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              value={filters.category}
              onChange={(e) => handleFilterChange('category', e.target.value)}
            >
              <option value="">All Categories</option>
              {categories.map((category) => (
                <option key={category} value={category}>{category}</option>
              ))}
            </select>
          </div>
          
          {/* Rating filter */}
          <div>
            <label htmlFor="rating" className="block text-sm font-medium text-gray-700 mb-1">
              Minimum Rating
            </label>
            <select
              id="rating"
              className="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              value={filters.minRating}
              onChange={(e) => handleFilterChange('minRating', Number(e.target.value))}
            >
              <option value="0">Any Rating</option>
              <option value="4">4+ Stars</option>
              <option value="4.5">4.5+ Stars</option>
              <option value="4.8">4.8+ Stars</option>
            </select>
          </div>
          
          {/* Price range filter */}
          <div>
            <label htmlFor="price" className="block text-sm font-medium text-gray-700 mb-1">
              Monthly Price Range
            </label>
            <select
              id="price"
              className="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              value={filters.priceRange}
              onChange={(e) => handleFilterChange('priceRange', e.target.value)}
            >
              <option value="">Any Price</option>
              <option value="0-200">Up to $200/month</option>
              <option value="200-300">$200 - $300/month</option>
              <option value="300-">$300+/month</option>
            </select>
          </div>
          
          {/* Featured toggle */}
          <div className="flex items-center">
            <input
              id="featured"
              type="checkbox"
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              checked={filters.featured}
              onChange={(e) => handleFilterChange('featured', e.target.checked)}
            />
            <label htmlFor="featured" className="ml-2 block text-sm text-gray-700">
              Featured Knowledge Bases Only
            </label>
          </div>
        </div>
      </div>
      
      {/* Comparison section (if items selected) */}
      {comparisonItems.length > 0 && (
        <div className="bg-white rounded-lg shadow-md p-6 mb-8">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Compare Knowledge Bases</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            {/* Headers */}
            <div className="hidden md:block">
              <div className="h-16"></div> {/* Empty space for alignment */}
              <div className="py-2 font-medium">Rating</div>
              <div className="py-2 font-medium">Coverage</div>
              <div className="py-2 font-medium">Monthly Price</div>
              <div className="py-2 font-medium">Annual Price</div>
              <div className="py-2 font-medium">One-Time Price</div>
              <div className="py-2 font-medium">Last Updated</div>
              <div className="py-2 font-medium">Publisher</div>
            </div>
            
            {/* Item columns */}
            {comparisonItems.map((item) => (
              <div key={item.id} className="bg-gray-50 p-4 rounded-lg relative">
                <button 
                  className="absolute top-2 right-2 text-gray-400 hover:text-gray-600"
                  onClick={() => toggleComparison(item)}
                >
                  <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                </button>
                
                <div className="font-medium text-lg mb-4 h-16 overflow-hidden">{item.title}</div>
                
                <div className="py-2 flex items-center md:block">
                  <span className="md:hidden font-medium mr-2">Rating:</span>
                  <div className="flex items-center">
                    <span className="text-yellow-400 flex">
                      {[...Array(5)].map((_, i) => (
                        <svg 
                          key={i} 
                          className="h-5 w-5" 
                          fill={i < Math.floor(item.rating) ? "currentColor" : "none"}
                          stroke="currentColor" 
                          viewBox="0 0 24 24" 
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path 
                            strokeLinecap="round" 
                            strokeLinejoin="round" 
                            strokeWidth="2" 
                            d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"
                          ></path>
                        </svg>
                      ))}
                    </span>
                    <span className="ml-1">{item.rating}</span>
                  </div>
                </div>
                
                <div className="py-2 flex md:block">
                  <span className="md:hidden font-medium mr-2">Coverage:</span>
                  <div>
                    <div className="flex items-center">
                      <div className="w-full bg-gray-200 rounded-full h-2.5 mr-2">
                        <div 
                          className="bg-blue-600 h-2.5 rounded-full" 
                          style={{ width: `${item.coverage}%` }}
                        ></div>
                      </div>
                      <span className="text-sm font-medium text-gray-900">{item.coverage}%</span>
                    </div>
                  </div>
                </div>
                
                <div className="py-2 flex md:block">
                  <span className="md:hidden font-medium mr-2">Monthly:</span>
                  <div>${item.price.monthly}/month</div>
                </div>
                
                <div className="py-2 flex md:block">
                  <span className="md:hidden font-medium mr-2">Annual:</span>
                  <div>${item.price.annual}/year</div>
                </div>
                
                <div className="py-2 flex md:block">
                  <span className="md:hidden font-medium mr-2">One-Time:</span>
                  <div>${item.price.oneTime}</div>
                </div>
                
                <div className="py-2 flex md:block">
                  <span className="md:hidden font-medium mr-2">Last Updated:</span>
                  <div>{item.lastUpdated}</div>
                </div>
                
                <div className="py-2 flex md:block">
                  <span className="md:hidden font-medium mr-2">Publisher:</span>
                  <div>{item.publisher}</div>
                </div>
                
                <div className="mt-4">
                  <button
                    className="w-full px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    onClick={() => selectKnowledgeBase(item)}
                  >
                    Select
                  </button>
                </div>
              </div>
            ))}
            
            {/* Empty columns for comparison */}
            {Array.from({ length: 3 - comparisonItems.length }).map((_, index) => (
              <div key={index} className="border-2 border-dashed border-gray-300 rounded-lg p-4 flex items-center justify-center">
                <p className="text-gray-400 text-center">
                  Add a knowledge base<br />to compare
                </p>
              </div>
            ))}
          </div>
        </div>
      )}
      
      {/* Knowledge bases grid */}
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
        {filteredKnowledgeBases.map((kb) => (
          <div key={kb.id} className="bg-white rounded-lg shadow-md overflow-hidden">
            {/* Featured badge */}
            {kb.featured && (
              <div className="bg-yellow-400 text-yellow-800 text-xs font-medium px-2.5 py-0.5 absolute right-0 mt-2 mr-2 rounded">
                Featured
              </div>
            )}
            
            <div className="p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-1">{kb.title}</h3>
              <p className="text-sm text-gray-500 mb-4">by {kb.publisher}</p>
              
              <div className="flex items-center mb-4">
                <div className="flex items-center">
                  <span className="text-yellow-400 flex">
                    {[...Array(5)].map((_, i) => (
                      <svg 
                        key={i} 
                        className="h-5 w-5" 
                        fill={i < Math.floor(kb.rating) ? "currentColor" : "none"}
                        stroke="currentColor" 
                        viewBox="0 0 24 24" 
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path 
                          strokeLinecap="round" 
                          strokeLinejoin="round" 
                          strokeWidth="2" 
                          d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"
                        ></path>
                      </svg>
                    ))}
                  </span>
                  <span className="ml-2 text-sm text-gray-700">{kb.rating} ({kb.reviews} reviews)</span>
                </div>
              </div>
              
              <div className="mb-4">
                <p className="text-sm text-gray-600">{kb.description}</p>
              </div>
              
              <div className="mb-4">
                <span className="text-xs font-medium mr-2 px-2.5 py-0.5 rounded bg-blue-100 text-blue-800">
                  {kb.category}
                </span>
                <span className="text-xs font-medium mr-2 px-2.5 py-0.5 rounded bg-green-100 text-green-800">
                  {kb.coverage}% Coverage
                </span>
                <span className="text-xs font-medium px-2.5 py-0.5 rounded bg-purple-100 text-purple-800">
                  Updated {kb.lastUpdated}
                </span>
              </div>
              
              <div className="mb-4">
                <div className="flex justify-between text-sm font-medium text-gray-900">
                  <span>${kb.price.monthly}/month</span>
                  <span>${kb.price.annual}/year</span>
                  <span>${kb.price.oneTime} one-time</span>
                </div>
              </div>
              
              <div className="flex space-x-2">
                <button
                  className="flex-1 px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  onClick={() => selectKnowledgeBase(kb)}
                >
                  Select
                </button>
                
                <button
                  className={`px-4 py-2 border rounded-md shadow-sm text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 ${
                    comparisonItems.some(item => item.id === kb.id)
                      ? 'border-blue-500 text-blue-700 bg-blue-50 hover:bg-blue-100 focus:ring-blue-500'
                      : 'border-gray-300 text-gray-700 bg-white hover:bg-gray-50 focus:ring-blue-500'
                  }`}
                  onClick={() => toggleComparison(kb)}
                  disabled={comparisonItems.length >= 3 && !comparisonItems.some(item => item.id === kb.id)}
                >
                  {comparisonItems.some(item => item.id === kb.id) ? 'Remove' : 'Compare'}
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>
      
      {/* Empty state if no results */}
      {filteredKnowledgeBases.length === 0 && (
        <div className="text-center py-12">
          <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <h3 className="mt-2 text-lg font-medium text-gray-900">No knowledge bases found</h3>
          <p className="mt-1 text-sm text-gray-500">
            Try adjusting your filters or search term to find more results.
          </p>
          <div className="mt-6">
            <button
              className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              onClick={() => {
                setSearchTerm('');
                setFilters({
                  category: '',
                  minRating: 0,
                  priceRange: '',
                  featured: false,
                });
              }}
            >
              <svg className="-ml-1 mr-2 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
              Reset Filters
            </button>
          </div>
        </div>
      )}
      
      {/* Pagination (simplified) */}
      <div className="mt-8 flex justify-between items-center">
        <div className="text-sm text-gray-700">
          Showing <span className="font-medium">{filteredKnowledgeBases.length}</span> of <span className="font-medium">{knowledgeBases.length}</span> knowledge bases
        </div>
        
        <div className="flex space-x-2">
          <button 
            className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            onClick={() => dispatch({ type: ACTION_TYPES.PREVIOUS_STEP })}
          >
            Back
          </button>
        </div>
      </div>
    </div>
  );
};

export default MarketplaceBrowser;
