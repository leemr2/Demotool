import React, { useEffect, useRef, useState } from 'react';
import { useDemoContext } from '../context/DemoContext';

// Mock data for the knowledge map
const generateMockKnowledgeMap = (userType, scenario) => {
  // Base nodes for all scenarios
  const baseNodes = [
    { id: 'core', label: 'Core Concepts', type: 'category', size: 100 },
    { id: 'procedures', label: 'Procedures', type: 'category', size: 80 },
    { id: 'guidelines', label: 'Guidelines', type: 'category', size: 70 },
    { id: 'references', label: 'References', type: 'category', size: 60 },
  ];
  
  // Scenario-specific nodes
  let specificNodes = [];
  
  if (scenario === 'medical') {
    specificNodes = [
      { id: 'diagnoses', label: 'Diagnoses', type: 'document', size: 85 },
      { id: 'treatments', label: 'Treatment Protocols', type: 'document', size: 90 },
      { id: 'medications', label: 'Medications', type: 'document', size: 75 },
      { id: 'contraindications', label: 'Contraindications', type: 'document', size: 65 },
      { id: 'patient-education', label: 'Patient Education', type: 'document', size: 55 },
    ];
  } else if (scenario === 'legal') {
    specificNodes = [
      { id: 'statutes', label: 'Statutes', type: 'document', size: 85 },
      { id: 'case-law', label: 'Case Law', type: 'document', size: 90 },
      { id: 'precedents', label: 'Precedents', type: 'document', size: 75 },
      { id: 'contracts', label: 'Contract Templates', type: 'document', size: 65 },
      { id: 'client-advice', label: 'Client Advice', type: 'document', size: 55 },
    ];
  } else if (scenario === 'financial') {
    specificNodes = [
      { id: 'regulations', label: 'Regulations', type: 'document', size: 85 },
      { id: 'compliance', label: 'Compliance', type: 'document', size: 90 },
      { id: 'products', label: 'Financial Products', type: 'document', size: 75 },
      { id: 'risk-assessments', label: 'Risk Assessments', type: 'document', size: 65 },
      { id: 'client-profiles', label: 'Client Profiles', type: 'document', size: 55 },
    ];
  } else {
    // Default nodes if no scenario selected
    specificNodes = [
      { id: 'doc1', label: 'Document 1', type: 'document', size: 85 },
      { id: 'doc2', label: 'Document 2', type: 'document', size: 75 },
      { id: 'doc3', label: 'Document 3', type: 'document', size: 65 },
      { id: 'doc4', label: 'Document 4', type: 'document', size: 55 },
      { id: 'doc5', label: 'Document 5', type: 'document', size: 45 },
    ];
  }
  
  // Generate links between nodes
  const links = [];
  
  // Connect each base node to at least one specific node
  baseNodes.forEach((baseNode, index) => {
    // Connect to at least one specific node
    links.push({
      source: baseNode.id,
      target: specificNodes[index % specificNodes.length].id,
      strength: 0.8
    });
    
    // Connect to another random specific node
    const randomIndex = Math.floor(Math.random() * specificNodes.length);
    if (randomIndex !== index % specificNodes.length) {
      links.push({
        source: baseNode.id,
        target: specificNodes[randomIndex].id,
        strength: 0.5
      });
    }
  });
  
  // Connect some specific nodes to each other
  for (let i = 0; i < specificNodes.length - 1; i++) {
    links.push({
      source: specificNodes[i].id,
      target: specificNodes[i + 1].id,
      strength: 0.3
    });
  }
  
  // Connect the first and last specific nodes to create a loop
  links.push({
    source: specificNodes[0].id,
    target: specificNodes[specificNodes.length - 1].id,
    strength: 0.2
  });
  
  return {
    nodes: [...baseNodes, ...specificNodes],
    links,
    coverage: {
      total: 100,
      covered: userType === 'knowledgeBuilder' ? 95 : userType === 'domainExpert' ? 85 : 75,
      gaps: [
        scenario === 'medical' ? 'Rare conditions' : scenario === 'legal' ? 'International law' : 'Alternative investments',
        scenario === 'medical' ? 'Experimental treatments' : scenario === 'legal' ? 'Recent court rulings' : 'Cryptocurrency regulations',
      ]
    }
  };
};

const KnowledgeMapVisualizer = () => {
  const { state } = useDemoContext();
  const svgRef = useRef(null);
  const [selectedNode, setSelectedNode] = useState(null);
  const [knowledgeMap, setKnowledgeMap] = useState(null);
  
  // Get the knowledge map from context or generate mock data
  useEffect(() => {
    if (state.knowledgeMap) {
      setKnowledgeMap(state.knowledgeMap);
    } else {
      setKnowledgeMap(generateMockKnowledgeMap(state.userType, state.selectedScenario || 'medical'));
    }
  }, [state.knowledgeMap, state.userType, state.selectedScenario]);
  
  // Render force-directed graph using D3 or a simple SVG representation
  // For demo purposes, we'll use a simplified visualization
  
  // Calculate node positions in a circular layout
  useEffect(() => {
    if (!knowledgeMap || !svgRef.current) return;
    
    const svg = svgRef.current;
    const width = svg.clientWidth;
    const height = svg.clientHeight;
    const centerX = width / 2;
    const centerY = height / 2;
    
    // Position base nodes in inner circle
    const baseNodes = knowledgeMap.nodes.filter(node => node.type === 'category');
    const baseRadius = Math.min(width, height) * 0.2;
    baseNodes.forEach((node, i) => {
      const angle = (i / baseNodes.length) * 2 * Math.PI;
      node.x = centerX + baseRadius * Math.cos(angle);
      node.y = centerY + baseRadius * Math.sin(angle);
    });
    
    // Position specific nodes in outer circle
    const specificNodes = knowledgeMap.nodes.filter(node => node.type === 'document');
    const specificRadius = Math.min(width, height) * 0.35;
    specificNodes.forEach((node, i) => {
      const angle = (i / specificNodes.length) * 2 * Math.PI;
      node.x = centerX + specificRadius * Math.cos(angle);
      node.y = centerY + specificRadius * Math.sin(angle);
    });
    
    // Force redraw
    setKnowledgeMap({ ...knowledgeMap });
  }, [knowledgeMap]);
  
  const handleNodeClick = (node) => {
    setSelectedNode(node);
  };
  
  // Get color based on node type
  const getNodeColor = (node) => {
    if (node.type === 'category') {
      return '#3B82F6'; // Blue for categories
    } else {
      return '#10B981'; // Green for documents
    }
  };
  
  // Get node size based on its importance
  const getNodeSize = (node) => {
    return 10 + (node.size / 10);
  };
  
  if (!knowledgeMap) {
    return <div className="p-8 text-center">Loading knowledge map...</div>;
  }
  
  return (
    <div className="w-full max-w-6xl mx-auto p-6">
      <h2 className="text-2xl font-bold mb-4">Knowledge Map</h2>
      <p className="text-gray-600 mb-6">
        This visualization shows how your knowledge base is structured and interconnected.
      </p>
      
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Main visualization panel */}
        <div className="lg:col-span-2 bg-white rounded-lg shadow-md p-4 h-96">
          <svg 
            ref={svgRef} 
            className="w-full h-full" 
            viewBox="0 0 800 600" 
            preserveAspectRatio="xMidYMid meet"
          >
            {/* Draw links between nodes */}
            {knowledgeMap.links.map((link, index) => {
              const source = knowledgeMap.nodes.find(n => n.id === link.source);
              const target = knowledgeMap.nodes.find(n => n.id === link.target);
              
              if (!source || !target || !source.x || !target.x) return null;
              
              return (
                <line
                  key={`link-${index}`}
                  x1={source.x}
                  y1={source.y}
                  x2={target.x}
                  y2={target.y}
                  stroke={link.source === selectedNode?.id || link.target === selectedNode?.id ? "#6366F1" : "#CBD5E1"}
                  strokeWidth={link.strength * 3}
                  strokeOpacity={link.source === selectedNode?.id || link.target === selectedNode?.id ? 0.8 : 0.4}
                />
              );
            })}
            
            {/* Draw nodes */}
            {knowledgeMap.nodes.map((node) => {
              if (!node.x || !node.y) return null;
              
              return (
                <g 
                  key={node.id}
                  transform={`translate(${node.x},${node.y})`}
                  onClick={() => handleNodeClick(node)}
                  className="cursor-pointer"
                >
                  <circle
                    r={getNodeSize(node)}
                    fill={node.id === selectedNode?.id ? "#6366F1" : getNodeColor(node)}
                    stroke={node.id === selectedNode?.id ? "#4F46E5" : "white"}
                    strokeWidth="2"
                  />
                  <text
                    dy="0.35em"
                    textAnchor="middle"
                    fontSize="10"
                    fill="white"
                    fontWeight="bold"
                  >
                    {node.label.split(' ')[0][0]}{node.label.split(' ')[1] ? node.label.split(' ')[1][0] : ''}
                  </text>
                  <text
                    dy="16"
                    textAnchor="middle"
                    fontSize="8"
                    fill="#1F2937"
                    className={node.id === selectedNode?.id ? "font-medium" : ""}
                  >
                    {node.label.length > 12 ? node.label.substring(0, 10) + '...' : node.label}
                  </text>
                </g>
              );
            })}
          </svg>
        </div>
        
        {/* Details and metrics panel */}
        <div className="bg-white rounded-lg shadow-md p-6">
          {selectedNode ? (
            <div>
              <h3 className="text-lg font-semibold mb-2">{selectedNode.label}</h3>
              <p className="text-sm text-gray-500 mb-4">
                {selectedNode.type === 'category' ? 'Category' : 'Document'}
              </p>
              
              <div className="space-y-4">
                <div>
                  <h4 className="text-sm font-medium text-gray-500">Content Coverage</h4>
                  <div className="mt-1 flex items-center">
                    <div className="w-full bg-gray-200 rounded-full h-2.5 mr-2">
                      <div 
                        className="bg-blue-600 h-2.5 rounded-full" 
                        style={{ width: `${selectedNode.size}%` }}
                      ></div>
                    </div>
                    <span className="text-xs font-medium text-gray-500">{selectedNode.size}%</span>
                  </div>
                </div>
                
                <div>
                  <h4 className="text-sm font-medium text-gray-500">Connected Topics</h4>
                  <ul className="mt-1 text-sm">
                    {knowledgeMap.links
                      .filter(link => link.source === selectedNode.id || link.target === selectedNode.id)
                      .map((link, index) => {
                        const connectedNodeId = link.source === selectedNode.id ? link.target : link.source;
                        const connectedNode = knowledgeMap.nodes.find(n => n.id === connectedNodeId);
                        
                        return (
                          <li key={`conn-${index}`} className="flex items-center py-1">
                            <span 
                              className="w-2 h-2 rounded-full mr-2"
                              style={{ backgroundColor: getNodeColor(connectedNode) }}
                            ></span>
                            {connectedNode.label}
                          </li>
                        );
                      })}
                  </ul>
                </div>
                
                {state.userType === 'knowledgeBuilder' && (
                  <div>
                    <h4 className="text-sm font-medium text-gray-500">Technical Details</h4>
                    <ul className="mt-1 text-xs text-gray-500">
                      <li>Vector Dimensions: 768</li>
                      <li>Chunks: {Math.round(selectedNode.size * 0.8)}</li>
                      <li>Avg. Chunk Size: 512 tokens</li>
                      <li>Last Updated: Today, 10:45 AM</li>
                    </ul>
                  </div>
                )}
              </div>
            </div>
          ) : (
            <div>
              <h3 className="text-lg font-semibold mb-2">Knowledge Base Overview</h3>
              <p className="text-sm text-gray-500 mb-4">
                Click on any node to see details.
              </p>
              
              <div className="space-y-4">
                <div>
                  <h4 className="text-sm font-medium text-gray-500">Overall Coverage</h4>
                  <div className="mt-1 flex items-center">
                    <div className="w-full bg-gray-200 rounded-full h-2.5 mr-2">
                      <div 
                        className="bg-green-600 h-2.5 rounded-full" 
                        style={{ width: `${knowledgeMap.coverage.covered}%` }}
                      ></div>
                    </div>
                    <span className="text-xs font-medium text-gray-500">{knowledgeMap.coverage.covered}%</span>
                  </div>
                </div>
                
                <div>
                  <h4 className="text-sm font-medium text-gray-500">Knowledge Base Structure</h4>
                  <ul className="mt-1 text-sm">
                    <li className="flex items-center py-1">
                      <span className="w-2 h-2 rounded-full bg-blue-500 mr-2"></span>
                      {knowledgeMap.nodes.filter(n => n.type === 'category').length} Categories
                    </li>
                    <li className="flex items-center py-1">
                      <span className="w-2 h-2 rounded-full bg-green-500 mr-2"></span>
                      {knowledgeMap.nodes.filter(n => n.type === 'document').length} Documents
                    </li>
                    <li className="flex items-center py-1">
                      <span className="w-2 h-2 rounded-full bg-gray-400 mr-2"></span>
                      {knowledgeMap.links.length} Connections
                    </li>
                  </ul>
                </div>
                
                <div>
                  <h4 className="text-sm font-medium text-gray-500">Potential Knowledge Gaps</h4>
                  <ul className="mt-1 text-sm text-orange-500">
                    {knowledgeMap.coverage.gaps.map((gap, index) => (
                      <li key={`gap-${index}`} className="flex items-center py-1">
                        <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                        </svg>
                        {gap}
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default KnowledgeMapVisualizer;
