import React, { useState } from 'react';
import { useDemoContext } from '../../context/DemoContext';

const PracticeIntegration = () => {
  const { state, dispatch, ACTION_TYPES } = useDemoContext();
  
  // Integration options state
  const [selectedIntegration, setSelectedIntegration] = useState(null);
  const [integrationConfig, setIntegrationConfig] = useState({});
  const [isDeploying, setIsDeploying] = useState(false);
  const [isDeployed, setIsDeployed] = useState(false);
  const [deploymentDetails, setDeploymentDetails] = useState(null);
  
  // Practice details from earlier steps
  const practiceName = state.projectDetails?.name || 'Your Practice';
  const practiceType = state.selectedScenario || 'medical';
  
  // Integration options
  const integrationOptions = [
    {
      id: 'website',
      title: 'Website Integration',
      description: 'Add your AI assistant to your practice website as a chat widget',
      icon: 'globe',
      complexity: 'Low',
      setupTime: '15 minutes',
      bestFor: 'Patient self-service',
    },
    {
      id: 'portal',
      title: 'Patient/Client Portal',
      description: 'Integrate your AI assistant into your existing patient/client portal',
      icon: 'users',
      complexity: 'Medium',
      setupTime: '1-2 hours',
      bestFor: 'Existing portal users',
    },
    {
      id: 'email',
      title: 'Email Integration',
      description: 'Allow patients/clients to email questions and receive AI-powered responses',
      icon: 'mail',
      complexity: 'Low',
      setupTime: '30 minutes',
      bestFor: 'Asynchronous communication',
    },
    {
      id: 'voice',
      title: 'Voice Assistant',
      description: 'Enable voice interaction with your AI assistant for in-office use',
      icon: 'microphone',
      complexity: 'Medium',
      setupTime: '1 hour',
      bestFor: 'In-office assistance',
    },
    {
      id: 'team',
      title: 'Team Dashboard',
      description: 'Provide your staff with an AI assistant dashboard for quick information lookup',
      icon: 'desktop',
      complexity: 'Low',
      setupTime: '45 minutes',
      bestFor: 'Staff productivity',
    },
    {
      id: 'mobile',
      title: 'Mobile App',
      description: 'Add your AI assistant to your practice mobile app',
      icon: 'smartphone',
      complexity: 'High',
      setupTime: '2-3 hours',
      bestFor: 'Mobile users',
    },
  ];
  
  // Handle integration selection
  const handleIntegrationSelect = (integrationId) => {
    setSelectedIntegration(integrationId);
    setIntegrationConfig({});
  };
  
  // Handle configuration change
  const handleConfigChange = (e) => {
    const { name, value, type, checked } = e.target;
    setIntegrationConfig({
      ...integrationConfig,
      [name]: type === 'checkbox' ? checked : value,
    });
  };
  
  // Handle deployment
  const handleDeploy = () => {
    setIsDeploying(true);
    
    // Simulate deployment process
    setTimeout(() => {
      setIsDeploying(false);
      setIsDeployed(true);
      
      // Create deployment details
      const option = integrationOptions.find(opt => opt.id === selectedIntegration);
      setDeploymentDetails({
        name: `${practiceName} AI Assistant`,
        integrationType: option.title,
        deploymentDate: new Date().toLocaleDateString(),
        status: 'Active',
        accessInfo: selectedIntegration === 'website' 
          ? `<script src="https://kb-ai.example.com/widget/${state.selectedScenario}-${Math.random().toString(36).substring(7)}.js"></script>`
          : selectedIntegration === 'email'
          ? `assistant@${practiceName.toLowerCase().replace(/\s+/g, '')}.com`
          : selectedIntegration === 'mobile'
          ? 'Integration code sent to your app developer'
          : 'Access credentials sent to your email',
      });
    }, 3000);
  };
  
  // Get configuration fields based on selected integration
  const getConfigurationFields = () => {
    if (!selectedIntegration) return [];
    
    switch (selectedIntegration) {
      case 'website':
        return [
          { id: 'position', label: 'Widget Position', type: 'select', options: ['Bottom Right', 'Bottom Left', 'Top Right', 'Top Left'] },
          { id: 'theme', label: 'Color Theme', type: 'select', options: ['Match Website', 'Light', 'Dark', 'Blue', 'Green'] },
          { id: 'welcomeMessage', label: 'Welcome Message', type: 'text', placeholder: 'How can I help you today?' },
          { id: 'showOnLoad', label: 'Show popup after page load', type: 'checkbox' },
          { id: 'collectEmail', label: 'Collect user email', type: 'checkbox' },
        ];
      case 'portal':
        return [
          { id: 'portalSection', label: 'Portal Section', type: 'select', options: ['Help Center', 'Dashboard', 'Resources', 'Custom Page'] },
          { id: 'integration', label: 'Integration Method', type: 'select', options: ['Embedded Widget', 'Full Page', 'Sidebar'] },
          { id: 'authentication', label: 'Use Portal Authentication', type: 'checkbox' },
          { id: 'personalize', label: 'Personalize based on user data', type: 'checkbox' },
        ];
      case 'email':
        return [
          { id: 'emailAddress', label: 'Email Address', type: 'text', placeholder: 'assistant@yourpractice.com' },
          { id: 'responseTime', label: 'Response Time', type: 'select', options: ['Immediate', 'Within 5 minutes', 'Within 15 minutes', 'Custom'] },
          { id: 'signature', label: 'Email Signature', type: 'textarea', placeholder: 'Your Practice AI Assistant' },
          { id: 'ccStaff', label: 'CC staff on complex queries', type: 'checkbox' },
          { id: 'autoForward', label: 'Auto-forward to staff when needed', type: 'checkbox' },
        ];
      case 'voice':
        return [
          { id: 'device', label: 'Device Type', type: 'select', options: ['Smart Speaker', 'Tablet', 'Desktop', 'Custom Hardware'] },
          { id: 'voiceType', label: 'Voice Type', type: 'select', options: ['Female', 'Male', 'Gender Neutral'] },
          { id: 'wakeWord', label: 'Wake Word/Phrase', type: 'text', placeholder: `"Hey ${practiceName} Assistant"` },
          { id: 'location', label: 'Installation Location', type: 'select', options: ['Reception', 'Waiting Room', 'Exam Rooms', 'Staff Area'] },
        ];
      case 'team':
        return [
          { id: 'teamMembers', label: 'Team Member Emails', type: 'textarea', placeholder: 'Enter email addresses, one per line' },
          { id: 'accessLevel', label: 'Access Level', type: 'select', options: ['Full Access', 'Read Only', 'Custom'] },
          { id: 'dashboard', label: 'Dashboard Integration', type: 'select', options: ['Standalone', 'EMR/PMS Integration', 'Intranet'] },
          { id: 'notifications', label: 'Enable notifications', type: 'checkbox' },
          { id: 'analytics', label: 'Track usage analytics', type: 'checkbox' },
        ];
      case 'mobile':
        return [
          { id: 'platform', label: 'App Platform', type: 'select', options: ['iOS', 'Android', 'Both'] },
          { id: 'integration', label: 'Integration Type', type: 'select', options: ['Native Component', 'WebView', 'Deep Link'] },
          { id: 'notification', label: 'Push Notifications', type: 'checkbox' },
          { id: 'offlineSupport', label: 'Limited offline support', type: 'checkbox' },
          { id: 'developerContact', label: 'App Developer Email', type: 'text', placeholder: 'developer@example.com' },
        ];
      default:
        return [];
    }
  };
  
  // Get icon for integration option
  const getOptionIcon = (iconName) => {
    switch (iconName) {
      case 'globe':
        return (
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"></path>
          </svg>
        );
      case 'users':
        return (
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"></path>
          </svg>
        );
      case 'mail':
        return (
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
          </svg>
        );
      case 'microphone':
        return (
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"></path>
          </svg>
        );
      case 'desktop':
        return (
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
          </svg>
        );
      case 'smartphone':
        return (
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
          </svg>
        );
      default:
        return (
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        );
    }
  };
  
  // Render configuration field based on type
  const renderConfigField = (field) => {
    switch (field.type) {
      case 'text':
        return (
          <input
            type="text"
            id={field.id}
            name={field.id}
            className="mt-1 focus:ring-blue-500 focus:border-blue-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"
            placeholder={field.placeholder || ''}
            value={integrationConfig[field.id] || ''}
            onChange={handleConfigChange}
          />
        );
      case 'textarea':
        return (
          <textarea
            id={field.id}
            name={field.id}
            rows="3"
            className="shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border-gray-300 rounded-md"
            placeholder={field.placeholder || ''}
            value={integrationConfig[field.id] || ''}
            onChange={handleConfigChange}
          ></textarea>
        );
      case 'select':
        return (
          <select
            id={field.id}
            name={field.id}
            className="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            value={integrationConfig[field.id] || ''}
            onChange={handleConfigChange}
          >
            <option value="">Select an option</option>
            {field.options.map((option) => (
              <option key={option} value={option}>{option}</option>
            ))}
          </select>
        );
      case 'checkbox':
        return (
          <div className="flex items-center h-5">
            <input
              id={field.id}
              name={field.id}
              type="checkbox"
              className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
              checked={integrationConfig[field.id] || false}
              onChange={handleConfigChange}
            />
          </div>
        );
      default:
        return null;
    }
  };
  
  return (
    <div className="w-full max-w-7xl mx-auto p-6">
      <h2 className="text-2xl font-bold mb-4">Practice Integration</h2>
      <p className="text-gray-600 mb-8">
        Choose how you want to integrate your AI assistant with your practice. Select the option that best fits your workflow and patient/client needs.
      </p>
      
      {isDeployed ? (
        <div className="bg-green-50 border border-green-200 rounded-lg p-6 mb-8">
          <div className="flex items-start">
            <div className="flex-shrink-0">
              <svg className="h-6 w-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <div className="ml-3">
              <h3 className="text-lg font-medium text-green-800">Integration Successful!</h3>
              <div className="mt-4 text-sm text-green-700">
                <p className="font-medium mb-2">Your AI assistant has been successfully integrated with your practice.</p>
                
                <div className="bg-white rounded-md p-4 border border-green-200 mt-4">
                  <h4 className="font-medium text-gray-900 mb-2">Integration Details</h4>
                  <dl className="grid grid-cols-1 gap-x-4 gap-y-2 sm:grid-cols-2">
                    <div className="sm:col-span-1">
                      <dt className="text-sm font-medium text-gray-500">Assistant Name</dt>
                      <dd className="mt-1 text-sm text-gray-900">{deploymentDetails.name}</dd>
                    </div>
                    <div className="sm:col-span-1">
                      <dt className="text-sm font-medium text-gray-500">Integration Type</dt>
                      <dd className="mt-1 text-sm text-gray-900">{deploymentDetails.integrationType}</dd>
                    </div>
                    <div className="sm:col-span-1">
                      <dt className="text-sm font-medium text-gray-500">Deployment Date</dt>
                      <dd className="mt-1 text-sm text-gray-900">{deploymentDetails.deploymentDate}</dd>
                    </div>
                    <div className="sm:col-span-1">
                      <dt className="text-sm font-medium text-gray-500">Status</dt>
                      <dd className="mt-1 text-sm text-gray-900">
                        <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                          {deploymentDetails.status}
                        </span>
                      </dd>
                    </div>
                    <div className="sm:col-span-2">
                      <dt className="text-sm font-medium text-gray-500">Access Information</dt>
                      <dd className="mt-1 text-sm text-gray-900 font-mono bg-gray-100 p-2 rounded overflow-x-auto">
                        {deploymentDetails.accessInfo}
                      </dd>
                    </div>
                  </dl>
                </div>
                
                <div className="mt-6">
                  <button 
                    className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    onClick={() => {
                      setIsDeployed(false);
                      setSelectedIntegration(null);
                      setIntegrationConfig({});
                    }}
                  >
                    Configure Another Integration
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      ) : (
        <>
          {/* Integration options grid */}
          <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 mb-8">
            {integrationOptions.map((option) => (
              <div 
                key={option.id} 
                className={`border rounded-lg p-6 cursor-pointer transition-all ${
                  selectedIntegration === option.id
                    ? 'border-blue-500 bg-blue-50 shadow-md'
                    : 'border-gray-200 hover:border-blue-300 hover:bg-blue-50'
                }`}
                onClick={() => handleIntegrationSelect(option.id)}
              >
                <div className="flex items-start">
                  <div className={`flex-shrink-0 h-10 w-10 rounded-md flex items-center justify-center ${
                    selectedIntegration === option.id ? 'bg-blue-500 text-white' : 'bg-gray-100 text-gray-500'
                  }`}>
                    {getOptionIcon(option.icon)}
                  </div>
                  <div className="ml-4">
                    <h3 className="text-lg font-medium text-gray-900">{option.title}</h3>
                    <p className="mt-1 text-sm text-gray-500">{option.description}</p>
                    <div className="mt-2 flex flex-wrap gap-y-1 gap-x-2 text-xs text-gray-500">
                      <span>Setup: {option.setupTime}</span>
                      <span>•</span>
                      <span>Complexity: {option.complexity}</span>
                      <span>•</span>
                      <span>Best for: {option.bestFor}</span>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
          
          {/* Configuration form */}
          {selectedIntegration && (
            <div className="bg-white rounded-lg shadow-md p-6 mb-8">
              <h3 className="text-lg font-medium text-gray-900 mb-4">
                Configuration Options
              </h3>
              
              <div className="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-2">
                {getConfigurationFields().map((field) => (
                  <div key={field.id} className={field.type === 'textarea' ? 'sm:col-span-2' : ''}>
                    <label htmlFor={field.id} className="block text-sm font-medium text-gray-700">
                      {field.label}
                    </label>
                    {renderConfigField(field)}
                  </div>
                ))}
              </div>
              
              <div className="mt-6 flex justify-end">
                <button
                  type="button"
                  className={`px-4 py-2 rounded-md text-white ${
                    isDeploying
                      ? 'bg-gray-400 cursor-not-allowed'
                      : 'bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'
                  }`}
                  onClick={handleDeploy}
                  disabled={isDeploying}
                >
                  {isDeploying ? (
                    <span className="flex items-center">
                      <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Deploying...
                    </span>
                  ) : (
                    'Deploy Integration'
                  )}
                </button>
              </div>
            </div>
          )}
        </>
      )}
      
      {/* Practice Benefits */}
      <div className="bg-blue-50 rounded-lg p-6 border border-blue-200 mb-8">
        <h3 className="text-lg font-medium text-gray-900 mb-4">Benefits for Your Practice</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div>
            <div className="flex items-center mb-2">
              <svg className="h-5 w-5 text-blue-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <h4 className="font-medium text-gray-900">Save Time</h4>
            </div>
            <p className="text-sm text-gray-600">
              Reduce time spent answering routine questions, allowing your staff to focus on more complex tasks and providing better service.
            </p>
          </div>
          
          <div>
            <div className="flex items-center mb-2">
              <svg className="h-5 w-5 text-blue-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
              </svg>
              <h4 className="font-medium text-gray-900">Improve Accuracy</h4>
            </div>
            <p className="text-sm text-gray-600">
              Provide consistent, accurate information to patients/clients based on your practice's specific protocols and guidelines.
            </p>
          </div>
          
          <div>
            <div className="flex items-center mb-2">
              <svg className="h-5 w-5 text-blue-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
              </svg>
              <h4 className="font-medium text-gray-900">Enhance Service</h4>
            </div>
            <p className="text-sm text-gray-600">
              Offer 24/7 support and immediate responses to common questions, improving patient/client satisfaction and engagement.
            </p>
          </div>
        </div>
      </div>
      
      {/* Next steps */}
      <div className="bg-gray-50 rounded-lg p-6 border border-gray-200">
        <h3 className="text-lg font-medium text-gray-900 mb-4">What's Next</h3>
        <p className="text-gray-600 mb-4">
          After integrating your AI assistant, here are some recommended next steps:
        </p>
        <ul className="space-y-2 text-sm text-gray-600">
          <li className="flex items-start">
            <svg className="h-5 w-5 text-green-500 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span>Announce the new AI assistant to your patients/clients through email, social media, or during appointments</span>
          </li>
          <li className="flex items-start">
            <svg className="h-5 w-5 text-green-500 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span>Train your staff on how to leverage the AI assistant to improve their workflow</span>
          </li>
          <li className="flex items-start">
            <svg className="h-5 w-5 text-green-500 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span>Regularly review the AI assistant's performance and user questions to identify areas for improvement</span>
          </li>
          <li className="flex items-start">
            <svg className="h-5 w-5 text-green-500 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span>Update your knowledge base regularly as your practice protocols, services, or information changes</span>
          </li>
        </ul>
      </div>
      
      {/* Action buttons */}
      <div className="mt-8 flex justify-between">
        <button 
          className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          onClick={() => dispatch({ type: ACTION_TYPES.PREVIOUS_STEP })}
        >
          Back
        </button>
        
        <button 
          className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          onClick={() => dispatch({ type: ACTION_TYPES.RESET_DEMO })}
        >
          Finish Demo
        </button>
      </div>
    </div>
  );
};

export default PracticeIntegration;
