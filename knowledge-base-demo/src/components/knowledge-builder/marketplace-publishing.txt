import React, { useState } from 'react';
import { useDemoContext } from '../context/DemoContext';

const MarketplacePublishing = () => {
  const { state, dispatch, ACTION_TYPES } = useDemoContext();
  
  // State for form fields
  const [publishingDetails, setPublishingDetails] = useState({
    title: state.projectDetails?.projectName || '',
    description: state.projectDetails?.description || '',
    category: state.selectedScenario === 'medical' ? 'Healthcare' : 
              state.selectedScenario === 'legal' ? 'Legal' : 
              state.selectedScenario === 'financial' ? 'Finance' : 'General',
    publisher: '',
    pricing: {
      model: 'subscription',
      monthly: 299,
      annual: 2990,
      oneTime: 7990,
    },
    featured: false,
    public: true,
    tags: [],
    tagInput: '',
    previewAccess: true,
    releaseDate: new Date().toISOString().split('T')[0],
    termsAccepted: false,
  });
  
  const [currentStep, setCurrentStep] = useState('details');
  const [publishingStatus, setPublishingStatus] = useState('ready'); // 'ready', 'publishing', 'success'
  
  // Handle input change
  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    
    if (name.startsWith('pricing.')) {
      const pricingField = name.split('.')[1];
      setPublishingDetails({
        ...publishingDetails,
        pricing: {
          ...publishingDetails.pricing,
          [pricingField]: type === 'number' ? parseFloat(value) : value,
        },
      });
    } else {
      setPublishingDetails({
        ...publishingDetails,
        [name]: type === 'checkbox' ? checked : value,
      });
    }
  };
  
  // Handle tag input
  const handleTagInput = (e) => {
    if (e.key === 'Enter' && publishingDetails.tagInput.trim()) {
      e.preventDefault();
      
      // Add tag if it doesn't already exist
      if (!publishingDetails.tags.includes(publishingDetails.tagInput.trim())) {
        setPublishingDetails({
          ...publishingDetails,
          tags: [...publishingDetails.tags, publishingDetails.tagInput.trim()],
          tagInput: '',
        });
      }
    }
  };
  
  // Remove tag
  const removeTag = (tagToRemove) => {
    setPublishingDetails({
      ...publishingDetails,
      tags: publishingDetails.tags.filter(tag => tag !== tagToRemove),
    });
  };
  
  // Handle form submission for each step
  const handleNextStep = (e) => {
    e.preventDefault();
    
    if (currentStep === 'details') {
      setCurrentStep('pricing');
    } else if (currentStep === 'pricing') {
      setCurrentStep('preview');
    } else if (currentStep === 'preview') {
      setCurrentStep('publish');
    }
  };
  
  // Handle back button
  const handleBack = () => {
    if (currentStep === 'pricing') {
      setCurrentStep('details');
    } else if (currentStep === 'preview') {
      setCurrentStep('pricing');
    } else if (currentStep === 'publish') {
      setCurrentStep('preview');
    }
  };
  
  // Handle publishing
  const handlePublish = () => {
    setPublishingStatus('publishing');
    
    // Simulate publishing delay
    setTimeout(() => {
      setPublishingStatus('success');
    }, 3000);
  };
  
  // Generate estimated revenue
  const estimateRevenue = () => {
    const averageActiveSubscribers = 50; // Assumed number for demonstration
    
    let monthlyRevenue = 0;
    
    if (publishingDetails.pricing.model === 'subscription') {
      monthlyRevenue = publishingDetails.pricing.monthly * averageActiveSubscribers;
    } else if (publishingDetails.pricing.model === 'usage') {
      monthlyRevenue = 0.05 * 10000 * averageActiveSubscribers; // Assume average of 10,000 queries at $0.05 per query
    } else if (publishingDetails.pricing.model === 'onetime') {
      monthlyRevenue = publishingDetails.pricing.oneTime * 5; // Assume 5 new purchases per month
    }
    
    return {
      monthly: monthlyRevenue,
      annual: monthlyRevenue * 12,
    };
  };
  
  // Render step content
  const renderStepContent = () => {
    switch (currentStep) {
      case 'details':
        return renderDetailsStep();
      case 'pricing':
        return renderPricingStep();
      case 'preview':
        return renderPreviewStep();
      case 'publish':
        return renderPublishStep();
      default:
        return null;
    }
  };
  
  // Render details step
  const renderDetailsStep = () => {
    return (
      <form onSubmit={handleNextStep} className="space-y-6">
        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Basic Information</h3>
          
          <div className="grid grid-cols-1 gap-y-6 gap-x-4">
            <div>
              <label htmlFor="title" className="block text-sm font-medium text-gray-700">
                Knowledge Base Title *
              </label>
              <input
                type="text"
                name="title"
                id="title"
                className="mt-1 focus:ring-blue-500 focus:border-blue-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"
                value={publishingDetails.title}
                onChange={handleInputChange}
                required
              />
            </div>
            
            <div>
              <label htmlFor="description" className="block text-sm font-medium text-gray-700">
                Description *
              </label>
              <textarea
                id="description"
                name="description"
                rows="4"
                className="shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border-gray-300 rounded-md"
                value={publishingDetails.description}
                onChange={handleInputChange}
                required
              ></textarea>
              <p className="mt-1 text-sm text-gray-500">
                Provide a clear description of what your knowledge base covers and its benefits.
              </p>
            </div>
            
            <div>
              <label htmlFor="category" className="block text-sm font-medium text-gray-700">
                Category *
              </label>
              <select
                id="category"
                name="category"
                className="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                value={publishingDetails.category}
                onChange={handleInputChange}
                required
              >
                <option value="Healthcare">Healthcare</option>
                <option value="Legal">Legal</option>
                <option value="Finance">Finance</option>
                <option value="Technology">Technology</option>
                <option value="Education">Education</option>
                <option value="Human Resources">Human Resources</option>
                <option value="Customer Service">Customer Service</option>
                <option value="General">General</option>
              </select>
            </div>
            
            <div>
              <label htmlFor="publisher" className="block text-sm font-medium text-gray-700">
                Publisher Name *
              </label>
              <input
                type="text"
                name="publisher"
                id="publisher"
                className="mt-1 focus:ring-blue-500 focus:border-blue-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"
                value={publishingDetails.publisher}
                onChange={handleInputChange}
                required
              />
              <p className="mt-1 text-sm text-gray-500">
                This will be displayed as the author of your knowledge base.
              </p>
            </div>
            
            <div>
              <label htmlFor="tagInput" className="block text-sm font-medium text-gray-700">
                Tags
              </label>
              <div className="mt-1 flex rounded-md shadow-sm">
                <input
                  type="text"
                  name="tagInput"
                  id="tagInput"
                  className="focus:ring-blue-500 focus:border-blue-500 flex-1 block w-full rounded-md sm:text-sm border-gray-300"
                  placeholder="Enter tags and press Enter"
                  value={publishingDetails.tagInput}
                  onChange={(e) => setPublishingDetails({...publishingDetails, tagInput: e.target.value})}
                  onKeyDown={handleTagInput}
                />
              </div>
              <p className="mt-1 text-sm text-gray-500">
                Add relevant tags to help users find your knowledge base. Press Enter to add.
              </p>
              
              {publishingDetails.tags.length > 0 && (
                <div className="mt-2 flex flex-wrap gap-2">
                  {publishingDetails.tags.map((tag) => (
                    <span
                      key={tag}
                      className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
                    >
                      {tag}
                      <button
                        type="button"
                        className="ml-1.5 inline-flex items-center justify-center h-4 w-4 rounded-full text-blue-400 hover:text-blue-600 focus:outline-none focus:text-blue-600"
                        onClick={() => removeTag(tag)}
                      >
                        <svg className="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                      </button>
                    </span>
                  ))}
                </div>
              )}
            </div>
            
            <div>
              <label htmlFor="releaseDate" className="block text-sm font-medium text-gray-700">
                Release Date *
              </label>
              <input
                type="date"
                name="releaseDate"
                id="releaseDate"
                className="mt-1 focus:ring-blue-500 focus:border-blue-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"
                value={publishingDetails.releaseDate}
                onChange={handleInputChange}
                required
              />
            </div>
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Visibility Settings</h3>
          
          <div className="space-y-4">
            <div className="relative flex items-start">
              <div className="flex items-center h-5">
                <input
                  id="public"
                  name="public"
                  type="checkbox"
                  className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
                  checked={publishingDetails.public}
                  onChange={handleInputChange}
                />
              </div>
              <div className="ml-3 text-sm">
                <label htmlFor="public" className="font-medium text-gray-700">
                  Public Listing
                </label>
                <p className="text-gray-500">
                  Make your knowledge base visible and searchable in the marketplace.
                </p>
              </div>
            </div>
            
            <div className="relative flex items-start">
              <div className="flex items-center h-5">
                <input
                  id="featured"
                  name="featured"
                  type="checkbox"
                  className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
                  checked={publishingDetails.featured}
                  onChange={handleInputChange}
                />
              </div>
              <div className="ml-3 text-sm">
                <label htmlFor="featured" className="font-medium text-gray-700">
                  Apply for Featured Status
                </label>
                <p className="text-gray-500">
                  Featured knowledge bases appear in prime locations in the marketplace (requires editorial review).
                </p>
              </div>
            </div>
            
            <div className="relative flex items-start">
              <div className="flex items-center h-5">
                <input
                  id="previewAccess"
                  name="previewAccess"
                  type="checkbox"
                  className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
                  checked={publishingDetails.previewAccess}
                  onChange={handleInputChange}
                />
              </div>
              <div className="ml-3 text-sm">
                <label htmlFor="previewAccess" className="font-medium text-gray-700">
                  Allow Preview Access
                </label>
                <p className="text-gray-500">
                  Let potential buyers test your knowledge base with sample queries before purchasing.
                </p>
              </div>
            </div>
          </div>
        </div>
        
        <div className="flex justify-end">
          <button
            type="button"
            className="mr-4 px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            onClick={() => dispatch({ type: ACTION_TYPES.PREVIOUS_STEP })}
          >
            Back
          </button>
          
          <button
            type="submit"
            className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Next: Pricing
          </button>
        </div>
      </form>
    );
  };
  
  // Render pricing step
  const renderPricingStep = () => {
    return (
      <form onSubmit={handleNextStep} className="space-y-6">
        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Pricing Model</h3>
          
          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Select a Pricing Model *
            </label>
            
            <div className="grid grid-cols-1 gap-4 sm:grid-cols-3">
              <div
                className={`border rounded-lg p-4 cursor-pointer transition-colors ${
                  publishingDetails.pricing.model === 'subscription'
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-200 hover:border-blue-300 hover:bg-blue-50'
                }`}
                onClick={() => setPublishingDetails({
                  ...publishingDetails,
                  pricing: { ...publishingDetails.pricing, model: 'subscription' }
                })}
              >
                <h4 className="font-medium text-gray-900">Subscription</h4>
                <p className="text-sm text-gray-500 mt-1">
                  Recurring payments for continued access. Most common model.
                </p>
              </div>
              
              <div
                className={`border rounded-lg p-4 cursor-pointer transition-colors ${
                  publishingDetails.pricing.model === 'usage'
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-200 hover:border-blue-300 hover:bg-blue-50'
                }`}
                onClick={() => setPublishingDetails({
                  ...publishingDetails,
                  pricing: { ...publishingDetails.pricing, model: 'usage' }
                })}
              >
                <h4 className="font-medium text-gray-900">Usage-Based</h4>
                <p className="text-sm text-gray-500 mt-1">
                  Pay per query or API call. Good for variable usage patterns.
                </p>
              </div>
              
              <div
                className={`border rounded-lg p-4 cursor-pointer transition-colors ${
                  publishingDetails.pricing.model === 'onetime'
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-200 hover:border-blue-300 hover:bg-blue-50'
                }`}
                onClick={() => setPublishingDetails({
                  ...publishingDetails,
                  pricing: { ...publishingDetails.pricing, model: 'onetime' }
                })}
              >
                <h4 className="font-medium text-gray-900">One-Time Purchase</h4>
                <p className="text-sm text-gray-500 mt-1">
                  Single payment for perpetual access. No recurring revenue.
                </p>
              </div>
            </div>
          </div>
          
          {/* Price configuration based on selected model */}
          {publishingDetails.pricing.model === 'subscription' && (
            <div className="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-2">
              <div>
                <label htmlFor="pricing.monthly" className="block text-sm font-medium text-gray-700">
                  Monthly Price (USD) *
                </label>
                <div className="mt-1 relative rounded-md shadow-sm">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <span className="text-gray-500 sm:text-sm">$</span>
                  </div>
                  <input
                    type="number"
                    name="pricing.monthly"
                    id="pricing.monthly"
                    className="focus:ring-blue-500 focus:border-blue-500 block w-full pl-7 pr-12 sm:text-sm border-gray-300 rounded-md"
                    value={publishingDetails.pricing.monthly}
                    onChange={handleInputChange}
                    min="0"
                    required
                  />
                  <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                    <span className="text-gray-500 sm:text-sm">/month</span>
                  </div>
                </div>
              </div>
              
              <div>
                <label htmlFor="pricing.annual" className="block text-sm font-medium text-gray-700">
                  Annual Price (USD) *
                </label>
                <div className="mt-1 relative rounded-md shadow-sm">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <span className="text-gray-500 sm:text-sm">$</span>
                  </div>
                  <input
                    type="number"
                    name="pricing.annual"
                    id="pricing.annual"
                    className="focus:ring-blue-500 focus:border-blue-500 block w-full pl-7 pr-12 sm:text-sm border-gray-300 rounded-md"
                    value={publishingDetails.pricing.annual}
                    onChange={handleInputChange}
                    min="0"
                    required
                  />
                  <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                    <span className="text-gray-500 sm:text-sm">/year</span>
                  </div>
                </div>
                <p className="mt-1 text-sm text-gray-500">
                  Typically 10-20% discount over monthly pricing.
                </p>
              </div>
              
              <div className="sm:col-span-2">
                <label htmlFor="pricing.oneTime" className="block text-sm font-medium text-gray-700">
                  One-Time Purchase Option (USD)
                </label>
                <div className="mt-1 relative rounded-md shadow-sm">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <span className="text-gray-500 sm:text-sm">$</span>
                  </div>
                  <input
                    type="number"
                    name="pricing.oneTime"
                    id="pricing.oneTime"
                    className="focus:ring-blue-500 focus:border-blue-500 block w-full pl-7 sm:text-sm border-gray-300 rounded-md"
                    value={publishingDetails.pricing.oneTime}
                    onChange={handleInputChange}
                    min="0"
                  />
                </div>
                <p className="mt-1 text-sm text-gray-500">
                  Optional. Typically 2-3 years worth of subscription fees.
                </p>
              </div>
            </div>
          )}
          
          {publishingDetails.pricing.model === 'usage' && (
            <div className="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-2">
              <div>
                <label htmlFor="pricing.monthly" className="block text-sm font-medium text-gray-700">
                  Price Per Query (USD) *
                </label>
                <div className="mt-1 relative rounded-md shadow-sm">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <span className="text-gray-500 sm:text-sm">$</span>
                  </div>
                  <input
                    type="number"
                    name="pricing.monthly"
                    id="pricing.monthly"
                    className="focus:ring-blue-500 focus:border-blue-500 block w-full pl-7 pr-12 sm:text-sm border-gray-300 rounded-md"
                    value={(publishingDetails.pricing.monthly / 10000).toFixed(4)}
                    onChange={(e) => setPublishingDetails({
                      ...publishingDetails,
                      pricing: {
                        ...publishingDetails.pricing,
                        monthly: parseFloat(e.target.value) * 10000
                      }
                    })}
                    step="0.0001"
                    min="0"
                    required
                  />
                  <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                    <span className="text-gray-500 sm:text-sm">/query</span>
                  </div>
                </div>
                <p className="mt-1 text-sm text-gray-500">
                  Typical range: $0.005 - $0.05 per query depending on complexity.
                </p>
              </div>
              
              <div>
                <label htmlFor="pricing.minimumFee" className="block text-sm font-medium text-gray-700">
                  Minimum Monthly Fee (USD)
                </label>
                <div className="mt-1 relative rounded-md shadow-sm">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <span className="text-gray-500 sm:text-sm">$</span>
                  </div>
                  <input
                    type="number"
                    name="pricing.annual"
                    id="pricing.annual"
                    className="focus:ring-blue-500 focus:border-blue-500 block w-full pl-7 sm:text-sm border-gray-300 rounded-md"
                    value={publishingDetails.pricing.annual}
                    onChange={handleInputChange}
                    min="0"
                  />
                </div>
                <p className="mt-1 text-sm text-gray-500">
                  Optional. Guarantees minimum revenue per customer.
                </p>
              </div>
              
              <div className="sm:col-span-2">
                <label htmlFor="pricing.oneTime" className="block text-sm font-medium text-gray-700">
                  Bulk Discount (100,000+ queries)
                </label>
                <div className="mt-1 relative rounded-md shadow-sm">
                  <input
                    type="number"
                    name="pricing.oneTime"
                    id="pricing.oneTime"
                    className="focus:ring-blue-500 focus:border-blue-500 block w-full pr-12 sm:text-sm border-gray-300 rounded-md"
                    value={publishingDetails.pricing.oneTime}
                    onChange={handleInputChange}
                    min="0"
                    max="100"
                  />
                  <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                    <span className="text-gray-500 sm:text-sm">%</span>
                  </div>
                </div>
                <p className="mt-1 text-sm text-gray-500">
                  Optional. Percentage discount for high-volume users.
                </p>
              </div>
            </div>
          )}
          
          {publishingDetails.pricing.model === 'onetime' && (
            <div className="grid grid-cols-1 gap-y-6 gap-x-4">
              <div>
                <label htmlFor="pricing.oneTime" className="block text-sm font-medium text-gray-700">
                  One-Time Purchase Price (USD) *
                </label>
                <div className="mt-1 relative rounded-md shadow-sm">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <span className="text-gray-500 sm:text-sm">$</span>
                  </div>
                  <input
                    type="number"
                    name="pricing.oneTime"
                    id="pricing.oneTime"
                    className="focus:ring-blue-500 focus:border-blue-500 block w-full pl-7 sm:text-sm border-gray-300 rounded-md"
                    value={publishingDetails.pricing.oneTime}
                    onChange={handleInputChange}
                    min="0"
                    required
                  />
                </div>
              </div>
              
              <div>
                <label htmlFor="pricing.monthlySupport" className="block text-sm font-medium text-gray-700">
                  Support Extension Fee (USD)
                </label>
                <div className="mt-1 relative rounded-md shadow-sm">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <span className="text-gray-500 sm:text-sm">$</span>
                  </div>
                  <input
                    type="number"
                    name="pricing.monthly"
                    id="pricing.monthly"
                    className="focus:ring-blue-500 focus:border-blue-500 block w-full pl-7 pr-12 sm:text-sm border-gray-300 rounded-md"
                    value={publishingDetails.pricing.monthly}
                    onChange={handleInputChange}
                    min="0"
                  />
                  <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                    <span className="text-gray-500 sm:text-sm">/year</span>
                  </div>
                </div>
                <p className="mt-1 text-sm text-gray-500">
                  Optional. Fee for extended support and updates beyond the initial period.
                </p>
              </div>
              
              <div>
                <label htmlFor="pricing.annual" className="block text-sm font-medium text-gray-700">
                  Volume Discount (5+ licenses)
                </label>
                <div className="mt-1 relative rounded-md shadow-sm">
                  <input
                    type="number"
                    name="pricing.annual"
                    id="pricing.annual"
                    className="focus:ring-blue-500 focus:border-blue-500 block w-full pr-12 sm:text-sm border-gray-300 rounded-md"
                    value={publishingDetails.pricing.annual}
                    onChange={handleInputChange}
                    min="0"
                    max="100"
                  />
                  <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                    <span className="text-gray-500 sm:text-sm">%</span>
                  </div>
                </div>
                <p className="mt-1 text-sm text-gray-500">
                  Optional. Percentage discount for multi-license purchases.
                </p>
              </div>
            </div>
          )}
        </div>
        
        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Revenue Projection</h3>
          
          <div className="bg-gray-50 rounded-lg p-4 mb-4">
            <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
              <div>
                <h4 className="text-sm font-medium text-gray-700">Estimated Monthly Revenue</h4>
                <p className="text-2xl font-bold text-gray-900">${estimateRevenue().monthly.toLocaleString()}</p>
                <p className="text-xs text-gray-500 mt-1">Based on projected marketplace sales</p>
              </div>
              
              <div>
                <h4 className="text-sm font-medium text-gray-700">Estimated Annual Revenue</h4>
                <p className="text-2xl font-bold text-gray-900">${estimateRevenue().annual.toLocaleString()}</p>
                <p className="text-xs text-gray-500 mt-1">Based on projected marketplace sales</p>
              </div>
            </div>
          </div>
          
          <p className="text-sm text-gray-500">
            Revenue projections are estimates based on similar knowledge bases in the marketplace. Actual results may vary.
          </p>
        </div>
        
        <div className="flex justify-between">
          <button
            type="button"
            className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            onClick={handleBack}
          >
            Back
          </button>
          
          <button
            type="submit"
            className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Next: Preview
          </button>
        </div>
      </form>
    );
  };
  
  // Render preview step
  const renderPreviewStep = () => {
    return (
      <div className="space-y-6">
        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Marketplace Preview</h3>
          <p className="text-gray-600 mb-6">
            Preview how your knowledge base will appear in the marketplace.
          </p>
          
          <div className="border border-gray-200 rounded-lg overflow-hidden">
            <div className="bg-white p-6">
              <div className="flex flex-col md:flex-row md:items-start">
                <div className="md:w-2/3 md:pr-8">
                  <div className="flex items-center mb-2">
                    {publishingDetails.featured && (
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 mr-2">
                        Featured
                      </span>
                    )}
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                      {publishingDetails.category}
                    </span>
                  </div>
                  
                  <h2 className="text-xl font-bold text-gray-900 mb-1">{publishingDetails.title}</h2>
                  <p className="text-sm text-gray-500 mb-4">by {publishingDetails.publisher}</p>
                  
                  <div className="flex items-center mb-4">
                    <div className="flex text-yellow-400">
                      {[...Array(5)].map((_, i) => (
                        <svg 
                          key={i} 
                          className="h-5 w-5" 
                          fill={i < 4 ? "currentColor" : "none"}
                          stroke="currentColor" 
                          viewBox="0 0 24 24" 
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path 
                            strokeLinecap="round" 
                            strokeLinejoin="round" 
                            strokeWidth="2" 
                            d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"
                          ></path>
                        </svg>
                      ))}
                    </div>
                    <span className="ml-2 text-sm text-gray-500">4.0 (New)</span>
                  </div>
                  
                  <p className="text-gray-600 mb-4">
                    {publishingDetails.description}
                  </p>
                  
                  {publishingDetails.tags.length > 0 && (
                    <div className="flex flex-wrap gap-2 mb-4">
                      {publishingDetails.tags.map((tag) => (
                        <span
                          key={tag}
                          className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800"
                        >
                          {tag}
                        </span>
                      ))}
                    </div>
                  )}
                  
                  <div className="flex items-center text-sm text-gray-500">
                    <svg className="h-5 w-5 text-gray-400 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                    </svg>
                    Released: {new Date(publishingDetails.releaseDate).toLocaleDateString()}
                  </div>
                </div>
                
                <div className="md:w-1/3 mt-6 md:mt-0">
                  <div className="bg-gray-50 rounded-lg p-6 border border-gray-200">
                    <h3 className="text-lg font-medium text-gray-900 mb-4">Pricing</h3>
                    
                    {publishingDetails.pricing.model === 'subscription' && (
                      <div>
                        <div className="mb-4">
                          <p className="text-sm text-gray-500">Monthly</p>
                          <p className="text-2xl font-bold text-gray-900">${publishingDetails.pricing.monthly}</p>
                        </div>
                        
                        <div className="mb-4">
                          <p className="text-sm text-gray-500">Annual (Save {Math.round((1 - (publishingDetails.pricing.annual / (publishingDetails.pricing.monthly * 12))) * 100)}%)</p>
                          <p className="text-2xl font-bold text-gray-900">${publishingDetails.pricing.annual}/year</p>
                        </div>
                        
                        {publishingDetails.pricing.oneTime > 0 && (
                          <div>
                            <p className="text-sm text-gray-500">One-Time Purchase</p>
                            <p className="text-2xl font-bold text-gray-900">${publishingDetails.pricing.oneTime}</p>
                          </div>
                        )}
                      </div>
                    )}
                    
                    {publishingDetails.pricing.model === 'usage' && (
                      <div>
                        <div className="mb-4">
                          <p className="text-sm text-gray-500">Per Query</p>
                          <p className="text-2xl font-bold text-gray-900">${(publishingDetails.pricing.monthly / 10000).toFixed(4)}</p>
                        </div>
                        
                        {publishingDetails.pricing.annual > 0 && (
                          <div className="mb-4">
                            <p className="text-sm text-gray-500">Minimum Monthly Fee</p>
                            <p className="text-2xl font-bold text-gray-900">${publishingDetails.pricing.annual}</p>
                          </div>
                        )}
                        
                        {publishingDetails.pricing.oneTime > 0 && (
                          <div>
                            <p className="text-sm text-gray-500">Bulk Discount (100k+ queries)</p>
                            <p className="text-2xl font-bold text-gray-900">{publishingDetails.pricing.oneTime}%</p>
                          </div>
                        )}
                      </div>
                    )}
                    
                    {publishingDetails.pricing.model === 'onetime' && (
                      <div>
                        <div className="mb-4">
                          <p className="text-sm text-gray-500">One-Time Purchase</p>
                          <p className="text-2xl font-bold text-gray-900">${publishingDetails.pricing.oneTime}</p>
                        </div>
                        
                        {publishingDetails.pricing.monthly > 0 && (
                          <div className="mb-4">
                            <p className="text-sm text-gray-500">Support Extension</p>
                            <p className="text-2xl font-bold text-gray-900">${publishingDetails.pricing.monthly}/year</p>
                          </div>
                        )}
                        
                        {publishingDetails.pricing.annual > 0 && (
                          <div>
                            <p className="text-sm text-gray-500">Volume Discount (5+ licenses)</p>
                            <p className="text-2xl font-bold text-gray-900">{publishingDetails.pricing.annual}%</p>
                          </div>
                        )}
                      </div>
                    )}
                    
                    <div className="mt-6">
                      <button
                        type="button"
                        className="w-full px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                      >
                        Purchase
                      </button>
                      
                      {publishingDetails.previewAccess && (
                        <button
                          type="button"
                          className="w-full mt-2 px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        >
                          Try Demo
                        </button>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Terms & Conditions</h3>
          
          <div className="bg-gray-50 rounded-lg p-4 mb-4 max-h-60 overflow-y-auto">
            <h4 className="font-medium mb-2">Knowledge Base Marketplace Agreement</h4>
            <p className="text-sm text-gray-600 mb-4">
              By publishing your knowledge base, you agree to the following terms:
            </p>
            <ol className="list-decimal list-inside text-sm text-gray-600 space-y-2">
              <li>You confirm that you own or have the rights to all content included in your knowledge base.</li>
              <li>You grant the platform a non-exclusive license to distribute your knowledge base according to your pricing and access settings.</li>
              <li>You will receive 80% of all revenue generated from sales of your knowledge base.</li>
              <li>Payments will be processed monthly for all sales in the previous month.</li>
              <li>The platform reserves the right to remove knowledge bases that violate our content policies.</li>
              <li>You are responsible for maintaining and updating your knowledge base as needed.</li>
              <li>The platform will provide analytics on usage and sales of your knowledge base.</li>
              <li>Either party may terminate this agreement with 30 days' notice, but existing customer access will be maintained for the duration of their purchase period.</li>
            </ol>
          </div>
          
          <div className="relative flex items-start mb-4">
            <div className="flex items-center h-5">
              <input
                id="termsAccepted"
                name="termsAccepted"
                type="checkbox"
                className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
                checked={publishingDetails.termsAccepted}
                onChange={handleInputChange}
                required
              />
            </div>
            <div className="ml-3 text-sm">
              <label htmlFor="termsAccepted" className="font-medium text-gray-700">
                I agree to the Terms & Conditions
              </label>
              <p className="text-gray-500">
                You must agree to the terms before publishing your knowledge base.
              </p>
            </div>
          </div>
        </div>
        
        <div className="flex justify-between">
          <button
            type="button"
            className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            onClick={handleBack}
          >
            Back
          </button>
          
          <button
            type="button"
            className={`px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ${
              !publishingDetails.termsAccepted 
                ? 'bg-gray-300 cursor-not-allowed' 
                : 'bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'
            }`}
            onClick={() => publishingDetails.termsAccepted && setCurrentStep('publish')}
            disabled={!publishingDetails.termsAccepted}
          >
            Next: Publish
          </button>
        </div>
      </div>
    );
  };
  
  // Render publish step
  const renderPublishStep = () => {
    return (
      <div className="space-y-6">
        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Ready to Publish</h3>
          
          <div className="bg-blue-50 rounded-lg p-6 mb-6 border border-blue-200">
            <div className="flex items-start">
              <div className="flex-shrink-0">
                <svg className="h-6 w-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <div className="ml-3">
                <h3 className="text-sm font-medium text-blue-800">Publishing Information</h3>
                <div className="mt-2 text-sm text-blue-700">
                  <p>
                    You're about to publish your knowledge base to the marketplace. Once published:
                  </p>
                  <ul className="list-disc list-inside mt-2 space-y-1">
                    <li>It will be {publishingDetails.public ? 'publicly visible and searchable' : 'available only through direct link'} in the marketplace</li>
                    <li>Users can purchase access according to your pricing model</li>
                    <li>You'll receive 80% of all revenue generated</li>
                    <li>You can update or unpublish your knowledge base at any time</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
          
          <div className="bg-gray-50 rounded-lg p-6 border border-gray-200">
            <h4 className="font-medium text-gray-900 mb-4">Publication Summary</h4>
            
            <dl className="grid grid-cols-1 gap-x-4 gap-y-4 sm:grid-cols-2">
              <div className="sm:col-span-1">
                <dt className="text-sm font-medium text-gray-500">Title</dt>
                <dd className="mt-1 text-sm text-gray-900">{publishingDetails.title}</dd>
              </div>
              <div className="sm:col-span-1">
                <dt className="text-sm font-medium text-gray-500">Category</dt>
                <dd className="mt-1 text-sm text-gray-900">{publishingDetails.category}</dd>
              </div>
              <div className="sm:col-span-1">
                <dt className="text-sm font-medium text-gray-500">Publisher</dt>
                <dd className="mt-1 text-sm text-gray-900">{publishingDetails.publisher}</dd>
              </div>
              <div className="sm:col-span-1">
                <dt className="text-sm font-medium text-gray-500">Release Date</dt>
                <dd className="mt-1 text-sm text-gray-900">{new Date(publishingDetails.releaseDate).toLocaleDateString()}</dd>
              </div>
              <div className="sm:col-span-2">
                <dt className="text-sm font-medium text-gray-500">Pricing Model</dt>
                <dd className="mt-1 text-sm text-gray-900">
                  {publishingDetails.pricing.model === 'subscription' && 'Subscription'}
                  {publishingDetails.pricing.model === 'usage' && 'Usage-Based'}
                  {publishingDetails.pricing.model === 'onetime' && 'One-Time Purchase'}
                </dd>
              </div>
              {publishingDetails.pricing.model === 'subscription' && (
                <>
                  <div className="sm:col-span-1">
                    <dt className="text-sm font-medium text-gray-500">Monthly Price</dt>
                    <dd className="mt-1 text-sm text-gray-900">${publishingDetails.pricing.monthly}</dd>
                  </div>
                  <div className="sm:col-span-1">
                    <dt className="text-sm font-medium text-gray-500">Annual Price</dt>
                    <dd className="mt-1 text-sm text-gray-900">${publishingDetails.pricing.annual}</dd>
                  </div>
                </>
              )}
              {publishingDetails.pricing.model === 'usage' && (
                <div className="sm:col-span-2">
                  <dt className="text-sm font-medium text-gray-500">Price Per Query</dt>
                  <dd className="mt-1 text-sm text-gray-900">${(publishingDetails.pricing.monthly / 10000).toFixed(4)}</dd>
                </div>
              )}
              {publishingDetails.pricing.model === 'onetime' && (
                <div className="sm:col-span-2">
                  <dt className="text-sm font-medium text-gray-500">One-Time Price</dt>
                  <dd className="mt-1 text-sm text-gray-900">${publishingDetails.pricing.oneTime}</dd>
                </div>
              )}
              <div className="sm:col-span-2">
                <dt className="text-sm font-medium text-gray-500">Visibility</dt>
                <dd className="mt-1 text-sm text-gray-900">{publishingDetails.public ? 'Public' : 'Private'}</dd>
              </div>
              <div className="sm:col-span-2">
                <dt className="text-sm font-medium text-gray-500">Preview Access</dt>
                <dd className="mt-1 text-sm text-gray-900">{publishingDetails.previewAccess ? 'Enabled' : 'Disabled'}</dd>
              </div>
            </dl>
          </div>
          
          {publishingStatus === 'publishing' && (
            <div className="mt-6 bg-white border border-gray-200 rounded-lg p-6 text-center">
              <svg className="animate-spin h-10 w-10 text-blue-500 mx-auto mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              <h4 className="text-lg font-medium text-gray-900 mb-2">Publishing Your Knowledge Base</h4>
              <p className="text-gray-500">
                This process typically takes a few minutes...
              </p>
            </div>
          )}
          
          {publishingStatus === 'success' && (
            <div className="mt-6 bg-green-50 border border-green-200 rounded-lg p-6">
              <div className="flex items-center justify-center mb-4">
                <svg className="h-12 w-12 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <h4 className="text-lg font-medium text-green-800 text-center mb-2">Successfully Published!</h4>
              <p className="text-green-700 text-center">
                Your knowledge base is now available in the marketplace.
              </p>
              
              <div className="mt-6 bg-white rounded-lg p-4 border border-green-200">
                <h5 className="font-medium text-gray-900 mb-2">Marketplace URL</h5>
                <div className="flex items-center">
                  <input
                    type="text"
                    readOnly
                    value={`https://knowledge-marketplace.example.com/kb/${publishingDetails.title.toLowerCase().replace(/\s+/g, '-')}`}
                    className="flex-1 bg-gray-50 focus:ring-green-500 focus:border-green-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"
                  />
                  <button
                    type="button"
                    className="ml-2 inline-flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                  >
                    Copy
                  </button>
                </div>
              </div>
              
              <div className="mt-6 text-center">
                <h5 className="font-medium text-gray-900 mb-2">Next Steps</h5>
                <ul className="space-y-2 text-sm text-gray-700">
                  <li className="flex items-center justify-center">
                    <svg className="h-5 w-5 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                    </svg>
                    Monitor performance in your dashboard
                  </li>
                  <li className="flex items-center justify-center">
                    <svg className="h-5 w-5 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                    </svg>
                    Update your knowledge base as needed
                  </li>
                  <li className="flex items-center justify-center">
                    <svg className="h-5 w-5 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"></path>
                    </svg>
                    Share your marketplace listing
                  </li>
                </ul>
              </div>
            </div>
          )}
        </div>
        
        <div className="flex justify-between">
          <button
            type="button"
            className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            onClick={handleBack}
            disabled={publishingStatus !== 'ready'}
          >
            Back
          </button>
          
          {publishingStatus === 'ready' && (
            <button
              type="button"
              className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              onClick={handlePublish}
            >
              Publish to Marketplace
            </button>
          )}
          
          {publishingStatus === 'success' && (
            <button
              type="button"
              className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              onClick={() => dispatch({ type: ACTION_TYPES.RESET_DEMO })}
            >
              Finish Demo
            </button>
          )}
        </div>
      </div>
    );
  };
  
  return (
    <div className="w-full max-w-7xl mx-auto p-6">
      <h2 className="text-2xl font-bold mb-4">Publish to Marketplace</h2>
      <p className="text-gray-600 mb-8">
        Make your knowledge base available to others through the marketplace.
      </p>
      
      {/* Progress steps */}
      <div className="mb-8">
        <nav aria-label="Progress">
          <ol className="flex items-center">
            <li className={`relative pr-8 sm:pr-20 ${currentStep === 'details' ? 'text-blue-600' : 'text-gray-500'}`}>
              <div className="absolute inset-0 flex items-center" aria-hidden="true">
                <div className={`h-0.5 w-full ${currentStep !== 'details' ? 'bg-blue-600' : 'bg-gray-200'}`}></div>
              </div>
              <a
                href="#"
                className={`relative flex h-8 w-8 items-center justify-center rounded-full ${
                  currentStep === 'details'
                    ? 'bg-blue-600 text-white'
                    : currentStep === 'pricing' || currentStep === 'preview' || currentStep === 'publish'
                      ? 'bg-blue-600 text-white'
                      : 'bg-white border-2 border-blue-600'
                }`}
                onClick={(e) => {
                  e.preventDefault();
                  if (currentStep !== 'details') setCurrentStep('details');
                }}
              >
                {currentStep !== 'details' && (currentStep === 'pricing' || currentStep === 'preview' || currentStep === 'publish') ? (
                  <svg className="h-5 w-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                ) : (
                  <span>1</span>
                )}
              </a>
              <div className="absolute top-10 text-center w-32" style={{ left: '-12px' }}>
                <span className="text-sm font-medium">Details</span>
              </div>
            </li>
            
            <li className={`relative px-8 sm:px-20 ${currentStep === 'pricing' ? 'text-blue-600' : 'text-gray-500'}`}>
              <div className="absolute inset-0 flex items-center" aria-hidden="true">
                <div className={`h-0.5 w-full ${
                  currentStep === 'preview' || currentStep === 'publish' ? 'bg-blue-600' : 'bg-gray-200'
                }`}></div>
              </div>
              <a
                href="#"
                className={`relative flex h-8 w-8 items-center justify-center rounded-full ${
                  currentStep === 'pricing'
                    ? 'bg-blue-600 text-white'
                    : currentStep === 'preview' || currentStep === 'publish'
                      ? 'bg-blue-600 text-white'
                      : 'bg-white border-2 border-gray-300'
                }`}
                onClick={(e) => {
                  e.preventDefault();
                  if (currentStep === 'preview' || currentStep === 'publish') setCurrentStep('pricing');
                }}
              >
                {currentStep !== 'pricing' && (currentStep === 'preview' || currentStep === 'publish') ? (
                  <svg className="h-5 w-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                ) : (
                  <span>2</span>
                )}
              </a>
              <div className="absolute top-10 text-center w-32" style={{ left: '-12px' }}>
                <span className="text-sm font-medium">Pricing</span>
              </div>
            </li>
            
            <li className={`relative px-8 sm:px-20 ${currentStep === 'preview' ? 'text-blue-600' : 'text-gray-500'}`}>
              <div className="absolute inset-0 flex items-center" aria-hidden="true">
                <div className={`h-0.5 w-full ${currentStep === 'publish' ? 'bg-blue-600' : 'bg-gray-200'}`}></div>
              </div>
              <a
                href="#"
                className={`relative flex h-8 w-8 items-center justify-center rounded-full ${
                  currentStep === 'preview'
                    ? 'bg-blue-600 text-white'
                    : currentStep === 'publish'
                      ? 'bg-blue-600 text-white'
                      : 'bg-white border-2 border-gray-300'
                }`}
                onClick={(e) => {
                  e.preventDefault();
                  if (currentStep === 'publish') setCurrentStep('preview');
                }}
              >
                {currentStep !== 'preview' && currentStep === 'publish' ? (
                  <svg className="h-5 w-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                ) : (
                  <span>3</span>
                )}
              </a>
              <div className="absolute top-10 text-center w-32" style={{ left: '-12px' }}>
                <span className="text-sm font-medium">Preview</span>
              </div>
            </li>
            
            <li className={`relative pl-8 sm:pl-20 ${currentStep === 'publish' ? 'text-blue-600' : 'text-gray-500'}`}>
              <a
                href="#"
                className={`relative flex h-8 w-8 items-center justify-center rounded-full ${
                  currentStep === 'publish'
                    ? 'bg-blue-600 text-white'
                    : 'bg-white border-2 border-gray-300'
                }`}
                aria-current={currentStep === 'publish' ? 'step' : undefined}
              >
                <span>4</span>
              </a>
              <div className="absolute top-10 text-center w-32" style={{ left: '-12px' }}>
                <span className="text-sm font-medium">Publish</span>
              </div>
            </li>
          </ol>
        </nav>
      </div>
      
      {/* Step content */}
      {renderStepContent()}
    </div>
  );
};

export default MarketplacePublishing;
